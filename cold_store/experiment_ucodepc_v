/* -----------------------------------------------------------------------------
 * Part of midgetv
 * 2019. Copyright B. Nossum.
 * For licence, see LICENCE
 * -----------------------------------------------------------------------------
 * Microcode program counter
 * 
 * usedinx_or_RST_I-------------------------+
 *                                ____      |
 * dinx[7:2] --------------------| or |     |
 * illegal_or_qualint_or_RST_I --|____|----|1\
 *                                         |  |--- minx[7:2]
 * rinx[7:2] ------------------------------|0/
 * 
 * usedinx_or_RST_I-------------------------+
 *                       ____               |
 * dinx[1] -------------| or |   ___        |
 * illegal_or_qualint_--|____|--| & |------|1\
 * RST_I-----------------------o|___|      |  |--- minx[1]
 * rinx[1] --------------------------------|0/
 * 
 * usedinx_or_RST_I ------------------------+
 *                                          |
 * illegal_or_qualint_or_RST_I --+          |
 * qualint_or_RST_I ------------|1\         |
 *                              |  |-------|1\
 * dinx[0] ---------------------|0/        |  |--- minx[0]
 *                                       +-|0/
 * maybranch -----------+                |
 * takebranch ---------|1\   ____        |
 *                     |  |-|    |-------+
 * rinx[0] ------------|0/  | or |
 * buserror-----------------|____|
 * 
 * When power-on, dinx is used, so a "lb x0,0(x0)" is executed.
 * 
 * Parameters:
 * HIGHLEVEL      1 : Understandable code
 *                0 : Primitives used. Smaller
 * LAZY_DECODE    0 : Full decode of the riscv instruction. Any unknown instruction leads to a trap
 *                1 : Decode of most riscv instructions. No decode in some minor code spaces
 *                2 : My programs are perfect! I never present an illegal instruction to midgetv.
 */
module m_ucodepc
  # ( parameter HIGHLEVEL = 1, LAZY_DECODE = 1 )
  (
   input        corerunning, //         Control startup
   input [7:0]  rinx, //                From ucode
   input        sa28,sa29,sa30,sa37, // From ucode
   input        sa32,sa15, //           == 2'b10 triggers ucode jmp to alternate operand fetch from SRAM
   input        qualint, //             Qualified interrupt
   input        is_brcond, //           Branch condition
   input [31:0] ADR_O, //               ADR_O[31] used at OpCode fetch to distinguish between EBR and SRAM
   input [31:0] INSTR, //               Instruction to decode at OpCode fetch
   input [31:0] B, //                   B[1:0] to find alignment errors. B[31] to distinguish EBR/SRAM
   input        RST_I, //               NMI
   input        buserror, //            Accessing empty region
   output [7:0] minx, //                Microcode PC
   output       ucodepc_killwarnings
   );
   wire [7:0]   dinx;
   wire         usedinx, maybranch, takebranch;
   wire         Adr0Mustbe0 = sa29;
   wire         Adr1Mustbe0 = sa30;
   wire         use_brcond  = sa37;
                
`ifdef verilator
   function [1:0] get_branchvariables;
      // verilator public
      get_branchvariables = {is_brcond,use_brcond};
   endfunction
   function [0:0] get_usedinx;
      // verilator public
      get_usedinx = usedinx;
   endfunction
   function [5:0] get_ucodepcinfo;
      // verilator public
      get_ucodepcinfo = {buserror,usedinx,qualint,illegal,maybranch,takebranch};
   endfunction
   function [7:0] get_dinx;
      // verilator public
      get_dinx = dinx;
   endfunction
`endif

   /* =============================================================================
    * HIGHLEVEL implementation
    * ============================================================================= */
   
   assign usedinx   = sa28 | !corerunning;
   assign maybranch = Adr0Mustbe0 | Adr1Mustbe0 | use_brcond | (sa32 & ~sa15);
   
   // Slight mangling of INSTRUCTION to an index. 
   assign dinx[0]   = INSTR[2];
   assign dinx[1]   = ((~INSTR[6]&INSTR[5])&INSTR[30]) | ((~(~INSTR[6]&INSTR[5]))&INSTR[3]);
   assign dinx[4:2] = INSTR[6:4];
   
   /* assign dinx[7:5] = INSTR[14:12]; Need some more space, so index sligthly more elaborate */
   assign dinx[6:5] = INSTR[13:12];
   /* Candidates to compress:
    * INSTR[6:0]
    * 6543210
    *   xxx
    * 0110111 lui
    * 0010111 auipc
    * 1101111jal
    */
   assign dinx[7]   = INSTR[14] & (INSTR[4:2] != 3'b101);
   /* This frees 8 instances of lui and 4 instances of auipc for the cost of 1 LUT */
   
   
   // =======================================================
   // No check on instructions, eat all
   // =======================================================
   /* takebranch. Microcode must diverge when we have an alignment error,
    * a taken branch, or an opcode fetch when we read from SRAM
    *                     _              ____
    * Adr0Mustbe0 -------|&|------------|    |--- takebranch
    * B[0] --------------|_|  +---------| or |
    *                     _   | +-------|    |
    * Adr1Mustbe0 -------|&|--+ | +-----|____|
    * B[1] --------------|_|    | |
    *                     _     | |
    * use_brcond --------|&|----+ |
    * is_brcond ---------|_|      |
    *                     _       |
    * read_instr --------|&|------+
    * ADR_O[31] ---------|_|
    */
   
   //
   // iceCube2 fails by this, internal error
   //
   
//   wire         qualint_or_RST_I = qualint | RST_I;
//   wire         illegal_or_qualint = qualint & corerunning;
//   wire         illegal_or_qualint_or_RST_I = (qualint | RST_I) & corerunning;
//   assign takebranch = (Adr0Mustbe0 & B[0]) |(Adr1Mustbe0 & B[1]) |(use_brcond & is_brcond) | (sa32 & ~sa15 & B[31] );
//   wire         usedinx_or_RST_I = usedinx | RST_I;
//   assign minx[7:2] = usedinx_or_RST_I ? (dinx[7:2] | {6{illegal_or_qualint_or_RST_I}}) : rinx[7:2];
//   assign minx[1]   = usedinx_or_RST_I ? ( (dinx[1] | illegal_or_qualint) & ~RST_I)     : rinx[1];
//   assign minx[0]   = buserror | (usedinx_or_RST_I ? (illegal_or_qualint_or_RST_I ? qualint_or_RST_I : dinx[0]) : (maybranch ? takebranch : rinx[0]));
  
   assign minx = 8'h0;
 
   assign ucodepc_killwarnings = INSTR[31] | &INSTR[29:15] | &INSTR[11:7] | &INSTR[1:0] | &ADR_O & &B;
   
endmodule


