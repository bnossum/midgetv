/* -----------------------------------------------------------------------------
 * Part of midgetv
 * 2019. Copyright B. Nossum.
 * For licence, see LICENCE
 * -----------------------------------------------------------------------------
 * Automaticaly generated by ../bin/midgetv_genucode (based on ../code/ucode.h).
 * Do not edit.
 *
 * uPC
 * ||            next uPC
 * ||            || ucodeInstruction
 * ||            || 333322222222221111111111
 * || label      || 3210987654321098765432109876543210 Purpose
 * -- ---------- -- ---------------------------------- ------------------------------------------------------
 * 00 LB_0       01 0110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs
 * 01 LB_1       d2 0010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]
 * 02 IJ_0       be 0010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~3u]. inCSR=0
 * 03 FENCE      e6 0010000000000000001011x01000xxxxx0 f      Prepare read PC (FENCE)
 * 04 ADDI_0     e6 0000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)
 * 05 _L05       04 0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/8)
 * 06 LB_3       07 0010000000000000011011101100010xx0        q = ~mem[rs1+ofs]
 * 07 LB_4       09 0010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]
 * 08 _L08       5a 0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm
 * 09 LB_5       0b 0010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80
 * 0a _L0a       5a 0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm
 * 0b LB_6       e6 0000000000000100001011101000100110        WTRG=(D^0x80)+0xFFFFFF7F+1=(D^0x80)-0x80
 * 0c ADD_0      04 0010000000000000111011101100001xx0 ADD    add     Addition Q = RS1
 * 0d MUL_0      fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 0e SUB_0      10 0010000000000000111011x01000xxxxx0 SUB    Subtraction
 * 0f _L0f       e6 0000000000000100001011101000110000 LUI    q = imm20
 * 10 SUB_1      0b 0010000000000000111111101100000xx0        Q = ~RS2
 * 11 AND_1      1a 0010000000000000111011101100000xx0        RS1^0xffffffff to Q
 * 12 eFetch3       000000000xx11001111111101100100110  Fr11  Write minstret. Update I. Q=immediate, use dinx
 * 13 condb_2    14 0010000000000000111111101100000xx0        ~RS2 in Q
 * 14 condb_3    15 0010000000000000001011101100100110        Calculate RS1+~RS2+1
 * 15 condb_4    16 0010000000000000110011101101001xx0        Branch on condition
 * 16 condb_5    de 0100000010001010110111000100110110        Branch not taken.
 * 17 condb_5t   74 0100000001101010110111101100100000        Branch taken.
 * 18 BEQ        13 0000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy
 * 19 JALR_0     41 0000000000001000101011101000100000 JALR   jj=RS1+imm
 * 1a ANDI_1     e6 0000000000000100001011101000011xx0        rd = Iimm & RS1
 * 1b _L1b       32 0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault
 * 1c ECAL_BRK   a6 0010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI
 * 1d ORI_2      e6 0000000000000100001011101000111000        rd = Iimm | RS1
 * 1e aFault_1   d4 0010000000000000101011001100100110        Q = 4
 * 1f IJ_2       b7 0000000000001100101011101000110000        Read word is to be masked with 2 lsb = 00
 * 20 LH_0       52 0100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.
 * 21 XORI_1     e6 0000000000000100001011101000000xx0        rd = Iimm ^ RS1
 * 22 _L22       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 23 FENCEI     e6 0010000000000000001011x01000xxxxx0 f      Prepare read PC (FENCE)
 * 24 SLLI_0     35 0010000000000000111100100x00110000 SLLI   Shift left immediate.
 * 25 _L25       04 0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/8)
 * 26 OR_1       27 0000000000001000111011101000000xx0        RS1^0xffffffff to jj
 * 27 OR_2       1d 0010000000000000000011101100100000        Q = rs2
 * 28 _L28       96 0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm
 * 29 XOR_1      21 0010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF
 * 2a _L2a       96 0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm
 * 2b SLTIX_1    30 0010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2
 * 2c SLL_0      3e 0010000000000000111011x00x00xxxxx0 SLL    Shift left
 * 2d MULH_0     fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 2e EBRKWFI2   f7 0000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI
 * 2f _L2f       e6 0000000000000100001011101000110000 LUI    q = imm20
 * 30 SLTIX_2    e6 0000000000000100001011101000110010        Registered ALU flag to rd
 * 31 SLTX_1     2b 0010000000000000111111101100000xx0        ~rs2 to Q
 * 32 JAL_1      86 0000000000001100001011101000100000        Target adr to yy
 * 33 JAERR_1    81 0000000000001111001011100x00100000  Err   JAL target adr misaligned, store to mtval
 * 34 JAL_3      de 0100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch
 * 35 SLLI_1     36 0000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)
 * 36 SLLI_2     03 0000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0
 * 37 ECALL_2    d7 0000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval
 * 38 BNE        13 0000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy
 * 39 _L39       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 3a SRxI_1     3d 0000000000000100101001101100001xx1        Register to shift to Q
 * 3b _L3b       32 0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault
 * 3c CSRRW_0    49 0000000000001000011011101000110000 CSRRW  Decoded CSR adr in jj
 * 3d SRxI_2     03 0000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0
 * 3e SLL_1      35 0010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2
 * 3f SRx_1      3a 0010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2
 * 40 LW_0       50 0110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm
 * 41 JALR_1     61 0010000000000000000011101100100110        Q=1
 * 42 _L42       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 43 _L43       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 44 SLTI_0     2b 0010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)
 * 45 WFI_3      65 0010000000000000101011101100100110        More check offset
 * 46 ILL_1      47 0100000000001101110111101100001xx0        Store PC to mepc and Q for read of instr
 * 47 ILL_2      8e 0010000010000000101111101100001xx0        Read until Q is offending instruction
 * 48 _L48       66 1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm
 * 49 CSRRW_1    4b 0000000000001100001011101100100110        CSRRW sentinel 0x00000100
 * 4a _L4a       66 1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm
 * 4b CSRRW_2    b0 0000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt
 * 4c SLT_0      31 0010000000000000111011x01000xxxxx0 SLT    Set less than (signed)
 * 4d MULHSU_0   fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 4e eILL0b     fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 4f MRET_8     e6 0010000000000000101011101100100110        Prep +4
 * 50 LW_1       e6 0001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]
 * 51 LDAF_LW    da 0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval
 * 52 LH_1       54 0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]
 * 53 LDAF_LH    da 0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval
 * 54 LH_2       eb 0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)
 * 55 aFaultb    1e 0000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval
 * 56 LH_4       57 0010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]
 * 57 LH_5       0b 0010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000
 * 58 _L58       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 59 _L59       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 5a SB_1       5d 0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift
 * 5b _L5b       32 0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault
 * 5c CSRRS_0    b1 0000000000001000011011101000110000 CSRRS  Decoded CSR adr in jj
 * 5d SB_2       69 0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)
 * 5e LHU_1      70 0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]
 * 5f LDAF_LHU   da 0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval
 * 60 _L60       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 61 JALR_2     86 0000000001101100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe
 * 62 _L62       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 63 _L63       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 64 SLTIU_0    2b 0010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)
 * 65 WFI_4      ef 0010000000000000001011x01001xxxxx0        Prepare read PC
 * 66 SW_1       f2 0000000000000011111011100100001xx0        Write d to a+k until accepted
 * 67 SWE        93 0000000000001111001011100x00110000        Store faulting address alignment to mtval
 * 68 _L68       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 69 SB_3       6b 0010000000000000000011101000110000        Prepare get back address to use 
 * 6a _L6a       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 6b SB_4       7a 1110000000000010110011101100001xx0        Address back to Q. Prepare get item to write
 * 6c SLTU_0     31 0010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)
 * 6d MULHU_0    fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 6e LHU_3      1a 0010000000000000011111101100010xx0        Invert q. Prepare read mask
 * 6f MRET_6     cf 0010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision
 * 70 LHU_2      6e 0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)
 * 71 aFaultc    1e 0000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval
 * 72 LBU_3      1a 0010000000000000011011101100010xx0        Invert q. Prepare read mask
 * 73 BAERR_1    76 0000000000001111110011101000001xx0        Faultadr to mtval. Prepare get offset
 * 74 BrOpFet    f4 0011001010000000101111101010001xx0 NewOp2 Read until instruction latched
 * 75 BAlignEr   73 0010000000000000001011x00x00xxxxx0  Err   Branch target instruction address misaligned
 * 76 BAERR_2    77 0010000000000000001011101100000xx0        ~offset to Q. Prep read (origPC+offset)
 * 77 BAERR_3    7d 0000000000001101101011100x00100110        origPC to mepc. Prep read 0
 * 78 _L78       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 79 _L79       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 7a SB_5       f2 0000000000000010110011100100001xx0        Write d to a+k until accepted
 * 7b _L7b       32 0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault
 * 7c CSRRC_0    b2 0000000000001000011011101000110000 CSRRC  Decoded CSR adr in jj
 * 7d BAERR_4    34 0000110000001110100111100x00001xx0        Store 0 to mcause. Prep get trap entry pont
 * 7e NMI_1      90 0000000000001101xxxx11101000001xx0        Store pc to mepc.
 * 7f JALRE2     7d 0000000000001111101011100x00001xx0        mtval is target
 * 80 LBU_0      85 0110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.
 * 81 JAERR_2    7d 0000000000001101101011100x00001xx0        Store PC to mepc
 * 82 _L82       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 83 _L83       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 84 XORI_0     21 0010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm
 * 85 LBU_1      f0 0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]
 * 86 JAL_2      34 0000000000000100110011000x00100110        Return address to TRG
 * 87 JALRE1     7f 0000000000001101110011100x00001xx0  err   Store pc to mepc
 * 88 _L88       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 89 ILL_4      8b 0010000000000000101011101100100110        Q = 1
 * 8a _L8a       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 8b ILL_5      34 0000110000001110100111100x00100110        Store 2 to mcause
 * 8c XOR_0      29 0010000000000000111111x01000xxxxx0 XOR    xor
 * 8d DIV_0      fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 8e ILL_3      89 0000000000001111101011101000110000        Store illegal instruction to mtval
 * 8f aF_SW_3    92 0000110000001110001011000x00100000        Store 7 to mcause
 * 90 NMI_2      34 0000110000001111010011101000110000        mtval = 0.
 * 91 LDAF_2     92 0000110000001110001011000x00100110        Store 4 to mcause
 * 92 LDAF_3     34 0000000000001101100111100x00001xx0        PC to mepc
 * 93 SW_E2      94 0000000000001101101111101000001xx0        Store address that faulted
 * 94 SW_E3      95 0010000000000000101111001100100110        Q = 3
 * 95 SW_E4      34 0000110000001110100111100x00101000        Store 6 to mcause
 * 96 SH_1       9a 0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift
 * 97 SWH        93 0000000000001111001011100x00110000        Store faulting address alignment to mtval
 * 98 BLT        13 0000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy
 * 99 _L99       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 9a SH_2       9d 0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)
 * 9b _L9b       de 000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx q:9b
 * 9c _L9c       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * 9d SH_3       9e 0010000000000000000011101000110000        Prepare get back address to use 
 * 9e SH_4       9f 1110000000000001110011101100001xx0        Address back to Q. Prepare get item to write
 * 9f SH_5       f2 0000000000000001110011100100001xx0        Write d to a+k until accepted
 * a0 LHU_0      5e 0100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm.
 * a1 ECALL_4    ce 0010000000000000101011001100100110        Q = 4
 * a2 _La2       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * a3 _La3       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * a4 SRxI_0     3a 0010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)
 * a5 MRET_3     af 0010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202
 * a6 ECAL_RET   d0 0010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET
 * a7 EBRKWFI1   2e 0010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI
 * a8 _La8       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * a9 ECALL_6    34 0000110000001110100111000x00100000        mcause = 11
 * aa _Laa       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * ab EBREAK_2   ba 0000000000001101101011101000001xx0        pc to mepc
 * ac _Lac       3f 0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)
 * ad DIVU_0     fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * ae _Lae       3f 0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)
 * af MRET_4     c5 0010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302
 * b0 CSRRW_3    e6 0010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104
 * b1 CSRRS_1    b4 0000000000001100011011001000100000        CSRRS sentinel 0x00000102
 * b2 CSRRC_1    b4 0000000000001100011011001000100110        CSRRC sentinel 0x0000103
 * b3 CSRRWI_1   b4 0000000000001100011011101000100110        CSRRWI sentinel 0xffffff80
 * b4 CSRRWI_2   4b 0010000000000000001011101100100110        Prepare write current PC to 0x100
 * b5 CSRRSI_1   b4 0000000000001100011011001000100000        CSRRSI sentinel 0xffffff82
 * b6 CSRRCI_1   b4 0000000000001100011011001000100110        CSRRCI sentinel 0xffffff83
 * b7 IJ_3       bd 0010000000000000110011001100100000        Construct Q = 3
 * b8 BGE        13 0000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy
 * b9 _Lb9       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * ba EBREAK_3   34 0000110000001110100111000x00100000        mcause = 3
 * bb _Lbb       de 000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx q:bb
 * bc CSRRWI_0   b3 0000000000001000010111101000110000 CSRRWI Decoded CSR adr in jj
 * bd IJ_4       de 0100000010001010110111100100011xx0        Mask and use as PC
 * be IJ_1       1f 0010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~3u]
 * bf IJT_1      c1 0010000010000000101111101100001xx0        Exit CSR, enter trap
 * c0 _Lc0       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * c1 IJT_2      e9 0000000000001100101011101000110000        Read word is to be masked with ~3u
 * c2 _Lc2       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * c3 _Lc3       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * c4 ORI_0      e1 0000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm
 * c5 MRET_5     6f 0010000000000000000011101100010xx0        ~302
 * c6 IJT_4      47 0100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr
 * c7 QINT_1     cb 0000000000001101xxxx11101000001xx0        Store pc to mepc.
 * c8 _Lc8       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * c9 MRET_2     a5 0010000000000000011011001100100000        0xff+3 = 0x102
 * ca _Lca       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * cb QINT_2     e6 0000110000001111010011101000110000        mtval = 0.
 * cc OR_0       26 0010000000000000111111x01000xxxxx0 OR     or
 * cd REM_0      fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * ce ECALL_5    a9 0010000000000000101011001100100110        Q = 8
 * cf MRET_7     4f 0010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104
 * d0 ECALL_1    37 0010000000000000001011101100100110 ECALL  Verify Imm==0x000
 * d1 MRET_1     c9 0000000000001000011011101000110000 MRET   First save Imm, start build constant for check
 * d2 LB_2       06 0010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)
 * d3 aFaultd    1e 0000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval
 * d4 aFault_2   92 0000110000001110001011100x00100110        Store 5 to mcause
 * d5 eFetch2    de 000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr11  Not in use
 * d6 eILL0c     fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * d7 ECALL_3    a1 0000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause
 * d8 BLTU       13 0000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy
 * d9 _Ld9       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * da LDAF_a     91 0010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval
 * db jFault_1   92 0000000000001110001011100x00100110        Store 1 to mcause
 * dc CSRRSI_0   b5 0000000000001000010111101000110000 CSRRSI Decoded CSR adr in jj
 * dd aF_SW_1    e5 0000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval
 * de Fetch      f4 0011001010000000101111101010001xx0  Fr11  Read and latch instruction
 * df eFetch     f4 0011001010000000101111101010001xx0  Fr11  rep Read until d=mem[(rs1+ofs) & ~3u]
 * e0 _Le0       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * e1 ORI_1      1d 0010000000000000000011101100001xx0        Q = RS1
 * e2 _Le2       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * e3 _Le3       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * e4 ANDI_0     1a 0010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm
 * e5 aF_SW_2    8f 0010000000000000101011001100100110        Q = 4
 * e6 StdIncPc   de 0100000010001010110111000100100110  Fr11  IncPC, OpFetch
 * e7 aFault     1e 0000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval
 * e8 _Le8       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * e9 IJT_3      c6 0010000000000000110011001100100000        Construct Q = 3
 * ea _Lea       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * eb LH_3       56 0010000000000000011111101100010xx0        q = ~mem[rs1+ofs]
 * ec AND_0      11 0010000000000000111111x01000xxxxx0 AND    And 
 * ed REMU_0     fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * ee eILL0a     fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * ef WFI_5      de 0100000010001010110111000100100110        IncPC, OpFetch
 * f0 LBU_2      72 0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)
 * f1 aFaulte    1e 0000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval
 * f2 SW_2       e6 0010000000000000001011x01000xxxxx0        Prepare read PC
 * f3 aF_SW      dd 0010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf
 * f4 Fetch2     12 0000000000001011000111111000100000  Fr11  Update ttime. Update I. Q=immediate. Use dinx
 * f5 jFault     db 0000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval
 * f6 WFI_1      fa 0010000000000000000011001100100110 WFI    To check offset
 * f7 EBREAK_1   ab 0000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval
 * f8 BGEU       13 0000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy
 * f9 _Lf9       fe 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen
 * fa WFI_2      45 0010000000000000101011101100100110        Check offset
 * fb _Lfb       de 000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx q:fb
 * fc CSRRCI_0   b6 0000000000001000010111101000110000 CSRRCI Decoded CSR adr in jj
 * fd NMI_0      7e 0010000000000000001011x01000xxxxx0 NMI    Get current PC
 * fe ILLe       46 0010000000000000001011x01000xxxxx0 Illegal
 * ff QINT_0     c7 0010000000000000001011x01000xxxxx0 INT    Get current PC
 */
localparam u0_0 = 256'hba30b2003000bb08ba26ab207b00ab207b18bb10b100ba20b2007b20fb096b20;
localparam u0_1 = 256'hba30b326ba38f930b930ba18ba20ba307b2071363b48bb26fb00fb26bb00fb00;
localparam u0_2 = 256'hba30ba503000b0003a26ab20bb00ab203b20ba00b100c830b2003000ba006b20;
localparam u0_3 = 256'hc808c8089b09ba30b9309b093000ba303a48db28db087908b820ba20fb00ba32;
localparam u0_4 = 256'hbb2630003000b200b908bb20bb26bb20fb087b08bb26fb10300030003b267b20;
localparam u0_5 = 256'hb930fb09db28ba30b930db08300030003b003b18ba309b09b930fb09b930fa08;
localparam u0_6 = 256'h3b26fb103000b2003b0830003a303000b830b908b240fb1030003000ba183000;
localparam u0_7 = 256'hb8083a087808ba30b930390830003000b826bb00b000fa883a08bb10ba309b09;
localparam u0_8 = 256'hb020ba303000f20078263000bb26300038083026fb09fb1030003000b8086b20;
localparam u0_9 = 256'h39083b083a3030000000db283000ba30b830db087828f326fa087808b0263a30;
localparam u0_A = 256'h3b26b0003000b000ba083000702030003b20f930bb26c83030003000b3266b20;
localparam u0_B = 256'hfb08fb0879187a30000070203000ba303320b226b220bb26ba26b226b220b326;
localparam u0_C = 256'hb240b3263000f2003a303000b32030003a087b183b10fa1030003000ba303000;
localparam u0_D = 256'hfa88fa88ba307a30b826b2003000ba30ba3030000000b826ba309b09ba30bb26;
localparam u0_E = 256'h712630003000f200fb10300033203000ba307126b326fb10300030003b083000;
localparam u0_F = 256'hb200b200b2007a300000bb263000ba30ba303326ba307e203100b200ba309b09;
localparam u1_0 = 256'h001080038000800300100023800100238001800180000010800090838a028003;
localparam u1_1 = 256'h0032800200108082818000100022003301ab022b800380008003006780038003;
localparam u1_2 = 256'h0010002180008003800000a3800300a3800000238000800380008000001000b3;
localparam u1_3 = 256'h80038003041200218180001280000033003404120012022b003c003080030010;
localparam u1_4 = 256'h8002800080008003200e81830030818382020037800280038000800080008183;
localparam u1_5 = 256'h003e8a0204320021818000328000800080028002003e8402003e8a02003e4212;
localparam u1_6 = 256'h8000800180008003800b800080008000003c000f800080038000800001b08000;
localparam u1_7 = 256'h003e0034303a00218180000b80008000003680008000ca02003f8001003e8402;
localparam u1_8 = 256'h3038003e80008003303a800080028000003700138a0280038000800000368003;
localparam u1_9 = 256'h00078007800080000000043280000033003c0032303a8002003600363038303d;
localparam u1_A = 256'h800080038000800300368000303a8000800081828001800380008000800200b3;
localparam u1_B = 256'h82028202022b00210000303a8000003380030031003180000031003100318002;
localparam u1_C = 256'h8001800280008003303d80008001800000340037800000238000800000328000;
localparam u1_D = 256'hca02ca02003e00210038800280000033003e800000003038003e840200218000;
localparam u1_E = 256'h022b8000800080038001800080038000003e022b800280038000800080008000;
localparam u1_F = 256'h80008000800000210000800280000033003c8000003e002c80008000003e8402;
localparam u2_0 = 256'h0398004003f8001003980168002c01680024001c00100398039802f803480005;
localparam u2_1 = 256'h02dc03500398029800c803980104004c01d1037900580054005000000068002c;
localparam u2_2 = 256'h039803dc03f800f800c00258008402580074009c001000d4039803f803980149;
localparam u2_3 = 256'h00e800d4000c012400c800f403f8004c035c000c00d803790204021800ac0398;
localparam u2_4 = 256'h039803f803f800c402c0019b012c019b0238011d019400ac03f803f801840141;
localparam u2_5 = 256'h036801c001a402c400c8017403f803f8002c015c007803ac0368015003680398;
localparam u2_6 = 256'h033c006803f800c401eb03f801ac03f8024c03c803bc00ac03f803f8021803f8;
localparam u2_7 = 256'h01f4024000d002c800c803c803f803f801f401dc01cc03d001d80068007801b8;
localparam u2_8 = 256'h0248022403f800a400d003f8022c03f801fc00d003c0008403f803f801f40215;
localparam u2_9 = 256'h03c8027f027803f80378027403f8004c024c026800d00254025000d0024800d0;
localparam u2_A = 256'h031400fc03f800fc02e803f800d003f800b8034002bc00e803f803f803380179;
localparam u2_B = 256'h0304007c037902cc037800d003f8004c02f402d002d0012c02d002d002d00398;
localparam u2_C = 256'h013c02a403f80098039803f8029403f8032c011d01bc038403f803f803a403f8;
localparam u2_D = 256'h03d003d0039402d40248024403f8004c028403f80378024800780018032400dc;
localparam u2_E = 256'h037903f803f80044015803f8031803f800780379023c006803f803f8007403f8;
localparam u2_F = 256'h031c011801f802d80378011403f8004c02ac03e8036c004803740398007801c8;
