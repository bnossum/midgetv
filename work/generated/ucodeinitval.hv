/* -----------------------------------------------------------------------------
 * Part of midgetv
 * 2019. Copyright B. Nossum.
 * For licence, see LICENCE
 * -----------------------------------------------------------------------------
 * Automaticaly generated by ../bin/midgetv_genucode (based on ../code/ucode.h).
 * Do not edit.
 *                             Microcode instruction
 * uPC           next uPC      44333333333322222222221111111111
 * || label      || next label 1098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ---------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       01 LB_1       0110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 LB_1       d2 LB_2       0010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * 02 IJ_0       be IJ_1       0010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~3u]. inCSR=0               0000000b ij       
 * 03 _L0x03     e6 StdIncPc   0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     e6 StdIncPc   0000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00000017 auipc   
 * 06 LB_3       07 LB_4       0010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * 07 LB_4       09 LB_5       0010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * 08 _L0x08     5a SB_1       0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 LB_5       8b LB_6       0010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * 0a _L0x0a     5a SB_1       0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b JALR_2     86 JAL_2      0000000001101100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * 0c ADD_0      04 ADDI_0     0010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     e6 StdIncPc   0000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      10 SUB_1      0010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     e6 StdIncPc   0000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 SUB_1      8b LB_6       0010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * 11 AND_1      1a ANDI_1     0010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * 12 eFetch3       (use dinx) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * 13 condb_2    14 condb_3    0010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * 14 condb_3    15 condb_4    0010000000000000001011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 15 condb_4    16 condb_5    0010000000000000110011101101001xx0        Branch on condition                               00000000 
 * 16 condb_5    de Fetch      0100000010001010110111000100110110        Branch not taken.                                 00000000 
 * 17 condb_5t   74 BrOpFet    0100000001101010110111101100100000        Branch taken.                                     00000000 
 * 18 BEQ        13 condb_2    0000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     41 JALR_1     0000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a ANDI_1     e6 StdIncPc   0000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * 1b _L0x1b     32 JAL_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000006f jal     
 * 1c ECAL_BRK   a6 ECAL_RET   0010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d ORI_2      e6 StdIncPc   0000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 1e aFault_1   d4 aFault_2   0010000000000000101011001100100110        Q = 4                                             00000000 
 * 1f IJ_2       b7 IJ_3       0000000000001100101011101000110000        Read word is to be masked with 2 lsb = 00         00000000 
 * 20 LH_0       52 LH_1       0100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 XORI_1     e6 StdIncPc   0000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   00000000 
 * 22 MULHU_6    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     e6 StdIncPc   0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     35 SLLI_1     0010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00001017 auipc   
 * 26 OR_1       27 OR_2       0000000000001000111011101000000xx0        RS1^0xffffffff to jj                              00000000 
 * 27 OR_2       1d ORI_2      0010000000000000000011101100100000        Q = rs2                                           00000000 
 * 28 _L0x28     96 SH_1       0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 XOR_1      21 XORI_1     0010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                00000000 
 * 2a _L0x2a     96 SH_1       0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b SLTIX_1    30 SLTIX_2    0010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             00000000 
 * 2c SLL_0      3e SLL_1      0010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     e6 StdIncPc   0000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e _LMULHU_1  fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40001033 sloppy sll     
 * 2f _L0x2f     e6 StdIncPc   0000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 SLTIX_2    e6 StdIncPc   0000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 31 SLTX_1     2b SLTIX_1    0010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * 32 JAL_1      86 JAL_2      0000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 33 JAERR_1    81 JAERR_2    0000000000001111001011100x00100000  Err   JAL target adr misaligned, store to mtval         00000000 
 * 34 JAL_3      de Fetch      0100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * 35 SLLI_1     36 SLLI_2     0000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * 36 SLLI_2     03 _L0x03     0000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 37 ECALL_2    d7 ECALL_3    0000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * 38 BNE        13 condb_2    0000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a SRxI_1     3d SRxI_2     0000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * 3b _L0x3b     32 JAL_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000106f jal     
 * 3c CSRRW_0    49 CSRRW_1    0000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d SRxI_2     03 _L0x03     0000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                00000000 
 * 3e SLL_1      35 SLLI_1     0010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * 3f SRx_1      3a SRxI_1     0010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * 40 LW_0       50 LW_1       0110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 JALR_1     0b JALR_2     0010000000000000000011101100100110        Q=1                                               00000000 
 * 42 MULHU_2    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 MULHU_4    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     2b SLTIX_1    0010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 WFI_3      65 WFI_4      0010000000000000101011101100100110        More check offset                                 00000000 
 * 46 ILL_1      47 ILL_2      0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * 47 ILL_2      8f ILL_3      0000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * 48 _L0x48     66 SW_1       1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 CSRRW_1    4b CSRRW_2    0010000000000000000011101100100110        Construct PC storage adr                          00000000 
 * 4a _L0x4a     66 SW_1       1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b CSRRW_2    b0 CSRRW_3    0000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * 4c SLT_0      31 SLTX_1     0010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e eILL0b     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40002033 sloppy slt     
 * 4f MRET_8     e6 StdIncPc   0010000000000000101011101100100110        Prep +4                                           00000000 
 * 50 LW_1       e6 StdIncPc   0001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 51 LDAF_LW    da LDAF_a     0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 52 LH_1       54 LH_2       0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 53 LDAF_LH    da LDAF_a     0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 54 LH_2       eb LH_3       0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 55 aFaultb    1e aFault_1   0000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 56 LH_4       57 LH_5       0010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * 57 LH_5       8b LB_6       0010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * 58 DIV_A      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_B      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a SB_1       5d SB_2       0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * 5b _L0x5b     32 JAL_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000206f jal     
 * 5c CSRRS_0    49 CSRRW_1    0000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d SB_2       fb SB_3       0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 5e LHU_1      70 LHU_2      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 5f LDAF_LHU   da LDAF_a     0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 60 MULHU_3    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 EBRKWFI2   f7 EBREAK_1   0000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         00000000 
 * 62 DIV_8      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 DIV_9      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    2b SLTIX_1    0010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 WFI_4      ef WFI_5      0010000000000000001011x01001xxxxx0        Prepare read PC                                   00000000 
 * 66 SW_1       f2 SW_2       0000000000000011111011100100001xx0        Write d to a+k until accepted                     00000000 
 * 67 SW_E1SWE   93 SW_E2      0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 68 DIV_12     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 _LDIV_13   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 6a MULH_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b SB_4       7a SB_5       1110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * 6c SLTU_0     31 SLTX_1     0010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e _LDIV_C    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40003033 sloppy sltu    
 * 6f MRET_6     cf MRET_7     0010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 70 LHU_2      ba LHU_3      0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 71 aFaultc    1e aFault_1   0000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * 72 LBU_3      1a ANDI_1     0010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * 73 BAERR_1    76 BAERR_2    0000000000001111110011101000001xx0        Faultadr to mtval. Prepare get offset             00000000 
 * 74 BrOpFet    f4 Fetch2     0011001010000000101111101010001xx0 NewOp2 Read until instruction latched                    00000000 
 * 75 BAlignEr   73 BAERR_1    0010000000000000001011x00x00xxxxx0  Err   Branch target instruction address misaligned      00000000 
 * 76 BAERR_2    77 BAERR_3    0010000000000000001011101100000xx0        ~offset to Q. Prep read (origPC+offset)           00000000 
 * 77 BAERR_3    7d BAERR_4    0000000000001101101011100x00100110        origPC to mepc. Prep read 0                       00000000 
 * 78 DIV_4      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 DIV_5      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a SB_5       f2 SW_2       0000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * 7b _L0x7b     32 JAL_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000306f jal     
 * 7c CSRRC_0    49 CSRRW_1    0000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d BAERR_4    34 JAL_3      0000110000001110100111100x00001xx0        Store 0 to mcause. Prep get trap entry pont       00000000 
 * 7e NMI_1      90 NMI_2      0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 7f JALRE2     7d BAERR_4    0000000000001111101011100x00001xx0        mtval is target                                   00000000 
 * 80 LBU_0      85 LBU_1      0110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 JAERR_2    7d BAERR_4    0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * 82 DIV_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 DIV_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     21 XORI_1     0010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 LBU_1      f0 LBU_2      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 86 JAL_2      34 JAL_3      0000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 87 JALRE1     7f JALRE2     0000000000001101110011100x00001xx0  err   Store pc to mepc                                  00000000 
 * 88 DIV_E      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 _LDIV_F    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 8a DIVU_5     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b LB_6       e6 StdIncPc   0000000000000100001011101000100110        WTRG=(D^0x80)+0xFFFFFF7F+1=(D^0x80)-0x80          00000000 
 * 8c XOR_0      29 XOR_1      0010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e _LCSRRS_1  fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40004033 sloppy xor     
 * 8f ILL_3      a9 ILL_4      0010000000000000101011101100100110        Q = 1                                             00000000 
 * 90 NMI_2      34 JAL_3      0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 91 LDAF_2     92 LDAF_3     0000110000001110001011000x00100110        Store 4 to mcause                                 00000000 
 * 92 LDAF_3     34 JAL_3      0000000000001101100111100x00001xx0        PC to mepc                                        00000000 
 * 93 SW_E2      95 SW_E3      0000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * 94 SW_E4      34 JAL_3      0000110000001110100111100x00101000        Store 6 to mcause                                 00000000 
 * 95 SW_E3      94 SW_E4      0010000000000000101111001100100110        Q = 3                                             00000000 
 * 96 SH_1       bb SH_2       0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * 97 SW_E1SWH   93 SW_E2      0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 98 BLT        13 condb_2    0000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 _L0x99     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00004067 close to jalr
 * 9a ECALL_6    34 JAL_3      0000110000001110100111000x00100000        mcause = 11                                       00000000 
 * 9b ILL_5         (use dinx) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 9c DIV_10     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d _LDIV_11   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 9e SH_4       9f SH_5       1110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * 9f SH_5       f2 SW_2       0000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * a0 LHU_0      5e LHU_1      0100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 ECALL_4    b6 ECALL_5    0010000000000000101011001100100110        Q = 4                                             00000000 
 * a2 DIV_14     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 _LDIV_15   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 0000500f close to fence
 * a4 SRxI_0     3a SRxI_1     0010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 MRET_3     af MRET_4     0010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * a6 ECAL_RET   d0 ECALL_1    0010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * a7 EBRKWFI1   61 EBRKWFI2   0010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * a8 DIV_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005023 close to store
 * a9 ILL_4      34 JAL_3      0000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * aa DIV_6      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab EBREAK_2   9a ECALL_6    0000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * ac _L0xac     3f SRx_1      0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     3f SRx_1      0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af MRET_4     c5 MRET_5     0010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * b0 CSRRW_3    b2 CSRRW_4    0010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * b1 aF_SW_3    92 LDAF_3     0000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * b2 CSRRW_4    de Fetch      0100000010001010110111000100100110        IncPC, OpFetch, but force +4                      00000000 
 * b3 CSRRWI_1      (use dinx) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * b4 LASTINCH      (use dinx) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Reserved to facilitate manual equation            00000000 
 * b5 SH_3       9e SH_4       0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * b6 ECALL_5    9a ECALL_6    0010000000000000101011001100100110        Q = 8                                             00000000 
 * b7 IJ_3       bd IJ_4       0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * b8 BGE        13 condb_2    0000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 DIV_e      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba LHU_3      1a ANDI_1     0010000000000000011111101100010xx0        Invert q. Prepare read mask                       00000000 
 * bb SH_2       b5 SH_3       0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * bc CSRRWI_0   49 CSRRW_1    0000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd IJ_4       de Fetch      0100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * be IJ_1       1f IJ_2       0010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~3u]                   00000000 
 * bf IJT_1      c1 IJT_2      0010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * c0 DIV_D      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 IJT_2      e9 IJT_3      0000000000001100101011101000110000        Read word is to be masked with ~3u                00000000 
 * c2 DIVU_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 DIVU_4     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      e1 ORI_1      0000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 MRET_5     6f MRET_6     0010000000000000000011101100010xx0        ~302                                              00000000 
 * c6 IJT_4      47 ILL_2      0100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * c7 QINT_1     cb QINT_2     0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * c8 DIV_7      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006023 close to store
 * c9 MRET_2     a5 MRET_3     0010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * ca DIVU_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb QINT_2     e6 StdIncPc   0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * cc OR_0       26 OR_1       0010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce _LCSRRCI_1 fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40006033 sloppy or      
 * cf MRET_7     4f MRET_8     0010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * d0 ECALL_1    37 ECALL_2    0010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 00000000 
 * d1 MRET_1     c9 MRET_2     0000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * d2 LB_2       06 LB_3       0010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     00000000 
 * d3 aFaultd    1e aFault_1   0000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * d4 aFault_2   92 LDAF_3     0000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * d5 eFetch2       (use dinx) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * d6 eILL0c     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * d7 ECALL_3    a1 ECALL_4    0000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * d8 BLTU       13 condb_2    0000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 MULH_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da LDAF_a     91 LDAF_2     0010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * db jFault_1   92 LDAF_3     0000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * dc CSRRSI_0   49 CSRRW_1    0000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd aF_SW_1    e5 aF_SW_2    0000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * de Fetch      f4 Fetch2     0000000000001000001111101010110000  Fr00  Read and latch instruction                        00000000 
 * df eFetch     f4 Fetch2     0001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * e0 DIVU_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 ORI_1      1d ORI_2      0010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * e2 MUL_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 MUL_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     1a ANDI_1     0010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 aF_SW_2    b1 aF_SW_3    0010000000000000101011001100100110        Q = 4                                             00000000 
 * e6 StdIncPc   de Fetch      0100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    00000000 
 * e7 aFault     1e aFault_1   0000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * e8 MUL_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 IJT_3      c6 IJT_4      0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * ea _LMULHU_5  fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007023 close to store
 * eb LH_3       56 LH_4       0010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * ec AND_0      11 AND_1      0010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee eILL0a     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007033 sloppy and     
 * ef WFI_5      de Fetch      0100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * f0 LBU_2      72 LBU_3      0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * f1 aFaulte    1e aFault_1   0000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * f2 SW_2       e6 StdIncPc   0010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * f3 aF_SW      dd aF_SW_1    0010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * f4 Fetch2        (use dinx) 000000000xx11011111111111100100000  Fr00  Update ttime. Update I. Q=immediate. Use dinx     00000000 
 * f5 jFault     db jFault_1   0000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * f6 WFI_1      fa WFI_2      0010000000000000000011001100100110 WFI    To check offset                                   00000000 
 * f7 EBREAK_1   ab EBREAK_2   0000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * f8 BGEU       13 condb_2    0000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa WFI_2      45 WFI_3      0010000000000000101011101100100110        Check offset                                      00000000 
 * fb SB_3       6b SB_4       0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * fc CSRRCI_0   49 CSRRW_1    0000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      7e NMI_1      0010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       46 ILL_1      0010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     c7 QINT_1     0010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 
 */
/* Col   x   1   0
 *  41   5   4 247 Can not simplify, can't possibly represent between 4 and 9 high values with only 4 bits index
 *  40   5  17 234 Can not simplify, can't possibly represent between 17 and 22 high values with only 4 bits index
 *  39   5 151 100 Can not simplify, can't possibly represent between 151 and 156 high values with only 4 bits index
 *  38   5   3 248 Can not simplify, can't possibly represent between 3 and 8 high values with only 4 bits index
 *  37   5  10 241 Can not simplify, can't possibly represent between 10 and 15 high values with only 4 bits index
 *  36   5  10 241 Can not simplify, can't possibly represent between 10 and 15 high values with only 4 bits index
 *  35   5   6 245 Can not simplify, can't possibly represent between 6 and 11 high values with only 4 bits index
 *  34   5   8 243 Can not simplify, can't possibly represent between 8 and 13 high values with only 4 bits index
 *  33   5  15 236 Can not simplify, no legal mapping
 *  32   6  10 240 Can not simplify, no legal mapping
 *  31   6  16 234 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  30   5   1 250 Can not simplify, can't possibly represent between 1 and 6 high values with only 4 bits index
 *  29   5  80 171 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  28   5  77 174 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  27   5  40 211 Can not simplify, can't possibly represent between 40 and 45 high values with only 4 bits index
 *  26   5  36 215 Can not simplify, can't possibly represent between 36 and 41 high values with only 4 bits index
 *  25  65 126  65 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  24  65  82 109 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  23  65 148  43 Can not simplify, can't represent fixed locations with any less than 6 bits of the index
 *  22  65  59 132 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  21   5 235  16 Can not simplify, can't represent fixed locations with any less than 5 bits of the index
 *  20   5 239  12 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  19  79 159  18 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  18   5   1 250 Can not simplify, can't possibly represent between 1 and 6 high values with only 4 bits index
 *  17   5 150 101 Can not simplify, can't possibly represent between 150 and 155 high values with only 4 bits index
 *  16  84 102  70 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  15   5   3 248 Can not simplify, can't possibly represent between 3 and 8 high values with only 4 bits index
 *  14   5   5 246 Can not simplify, can't possibly represent between 5 and 10 high values with only 4 bits index
 *  13  79 108  69 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  12  79  67 110 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  11  79  53 124 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  10 148  30  78 
 * Candidate function 4002, used ffff, inputs 0f
 *                             Microcode instruction
 * uPC           next uPC      44333333333322222222221111111111
 * || label      || next label 1098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ---------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       7d BAERR_4    0110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 condb_3    da LDAF_a     0010000000000000001011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 02 IJ_0       54 LH_2       0010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~3u]. inCSR=0               0000000b ij       
 * 03 _L0x03     5e LHU_1      0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     5e LHU_1      0000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00000017 auipc   
 * 06 BAERR_2    85 LBU_1      0010000000000000001011101100000xx0        ~offset to Q. Prep read (origPC+offset)           00000000 
 * 07 EBREAK_2   89 _LDIV_F    0000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * 08 _L0x08     dd aF_SW_1    0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 ORI_2      ffffffff (null)     0000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 0a _L0x0a     dd aF_SW_1    0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b IJ_2       3e SLL_1      0000000000001100101011101000110000        Read word is to be masked with 2 lsb = 00         00000000 
 * 0c ADD_0      04 ADDI_0     0010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     5e LHU_1      0000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      8f ILL_3      0010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     5e LHU_1      0000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 eILL0b     ffffffff (null)     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 11 MRET_8     9f SH_5       0010000000000000101011101100100110        Prep +4                                           00000000 
 * 12 JAL_1         (use dinx) 0000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 13 JAERR_1    01 LB_1       0000000000001111001011100x00100000  Err   JAL target adr misaligned, store to mtval         00000000 
 * 14 Fetch2     9d _LDIV_11   000000000xx11011111111111100100000  Fr00  Update ttime. Update I. Q=immediate. Use dinx     00000000 
 * 15 jFault     1e aFault_1   0000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * 16 SB_5       f2 SW_2       0000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * 17 CSRRWI_1   34 JAL_3      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 18 BEQ        95 SW_E3      0000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     41 JALR_1     0000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a OR_2       5e LHU_1      0010000000000000000011101100100000        Q = rs2                                           00000000 
 * 1b _L0x1b     12 eFetch3    0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000006f jal     
 * 1c ECAL_BRK   d2 LB_2       0010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d SLTIX_2    5e LHU_1      0000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 1e condb_5    de Fetch      0100000010001010110111000100110110        Branch not taken.                                 00000000 
 * 1f condb_5t   50 LW_1       0100000001101010110111101100100000        Branch taken.                                     00000000 
 * 20 LH_0       52 LH_1       0100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 aFault_1   5e LHU_1      0010000000000000101011001100100110        Q = 4                                             00000000 
 * 22 MULHU_6    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     5e LHU_1      0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     b4 LASTINCH   0010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00001017 auipc   
 * 26 BAERR_4    1a ANDI_1     0000110000001110100111100x00001xx0        Store 0 to mcause. Prep get trap entry pont       00000000 
 * 27 LASTINCH   09 LB_5       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Reserved to facilitate manual equation            00000000 
 * 28 _L0x28     ba LHU_3      0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 SLLI_2     a3 _LDIV_15   0000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 2a _L0x2a     ba LHU_3      0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b SB_2       1d ORI_2      0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 2c SLL_0      c5 MRET_5     0010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     5e LHU_1      0000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e SLTIX_1    fe ILLe       0010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             40001033 sloppy sll     
 * 2f _L0x2f     5e LHU_1      0000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 eILL0a     5e LHU_1      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 31 WFI_5      2e _LMULHU_1  0100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * 32 LW_1       3e SLL_1      0001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 33 LDAF_LW    56 LH_4       0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 34 BrOpFet    f2 SW_2       0011001010000000101111101010001xx0 NewOp2 Read until instruction latched                    00000000 
 * 35 BAlignEr   29 XOR_1      0010000000000000001011x00x00xxxxx0  Err   Branch target instruction address misaligned      00000000 
 * 36 NMI_1      03 _L0x03     0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 37 IJ_4       eb LH_3       0100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * 38 BNE        95 SW_E3      0000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a NMI_2      bf IJT_1      0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 3b _L0x3b     12 eFetch3    0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000106f jal     
 * 3c CSRRW_0    61 EBRKWFI2   0000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d SW_E4      03 _L0x03     0000110000001110100111100x00101000        Store 6 to mcause                                 00000000 
 * 3e JAL_2      b4 LASTINCH   0000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 3f JALRE1     bd IJ_4       0000000000001101110011100x00001xx0  err   Store pc to mepc                                  00000000 
 * 40 LW_0       32 JAL_1      0110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 JALR_1     8b LB_6       0010000000000000000011101100100110        Q=1                                               00000000 
 * 42 MULHU_2    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 DIVU_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     2e _LMULHU_1  0010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 ECALL_6    e5 aF_SW_2    0000110000001110100111000x00100000        mcause = 11                                       00000000 
 * 46 JALRE2     cf MRET_7     0000000000001111101011100x00001xx0        mtval is target                                   00000000 
 * 47 MRET_5     81 JAERR_2    0010000000000000000011101100010xx0        ~302                                              00000000 
 * 48 _L0x48     9a ECALL_6    1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 aF_SW_3    d0 ECALL_1    0000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * 4a _L0x4a     9a ECALL_6    1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b SH_3       c1 IJT_2      0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 4c SLT_0      af MRET_4     0010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e ECALL_1    fe ILLe       0010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 40002033 sloppy slt     
 * 4f MRET_1     5e LHU_1      0000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * 50 IJ_3       5e LHU_1      0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 51 WFI_3      a7 EBRKWFI1   0010000000000000101011101100100110        More check offset                                 00000000 
 * 52 LH_1       72 LBU_3      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 53 LDAF_LH    a7 EBRKWFI1   0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 54 IJ_1       d7 ECALL_3    0010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~3u]                   00000000 
 * 55 IJT_1      21 XORI_1     0010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * 56 JAERR_2    d5 eFetch2    0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * 57 IJT_4      ffffffff (null)     0100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * 58 MULHU_4    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_A      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a SH_2       2b SLTIX_1    0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * 5b _L0x5b     12 eFetch3    0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000206f jal     
 * 5c CSRRS_0    61 EBRKWFI2   0000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d IJT_2      7a SB_5       0000000000001100101011101000110000        Read word is to be masked with ~3u                00000000 
 * 5e StdIncPc   b2 CSRRW_4    0100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    00000000 
 * 5f aFault     a7 EBRKWFI1   0000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * 60 DIV_B      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 CSRRW_1    6f MRET_6     0010000000000000000011101100100110        Construct PC storage adr                          00000000 
 * 62 MULHU_3    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 MUL_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    2e _LMULHU_1  0010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 MRET_2     31 SLTX_1     0010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * 66 LBU_1      74 BrOpFet    0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 67 QINT_1     a6 ECAL_RET   0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 68 DIV_8      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 QINT_2     fe ILLe       0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 6a DIV_9      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b aF_SW_1    16 condb_5    0000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * 6c SLTU_0     af MRET_4     0010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e WFI_1      fe ILLe       0010000000000000000011001100100110 WFI    To check offset                                   40003033 sloppy sltu    
 * 6f EBREAK_1   87 JALRE1     0000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * 70 IJT_3      ffffffff (null)     0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 71 MRET_6     21 XORI_1     0010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 72 LH_2       9f SH_5       0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 73 aFaultb    06 LB_3       0000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 74 SW_2       14 condb_3    0010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * 75 aF_SW      f5 jFault     0010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * 76 _LDIV_F    7e NMI_1      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 77 _LCSRRCI_1 26 OR_1       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 78 DIV_12     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 MULH_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a SB_3       74 BrOpFet    0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 7b _L0x7b     12 eFetch3    0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000306f jal     
 * 7c CSRRC_0    61 EBRKWFI2   0000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d LB_1       b0 CSRRW_3    0010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * 7e BAERR_3    3a SRxI_1     0000000000001101101011100x00100110        origPC to mepc. Prep read 0                       00000000 
 * 7f LB_3       26 OR_1       0010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * 80 LBU_0      66 SW_1       0110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 ILL_3      26 OR_1       0010000000000000101011101100100110        Q = 1                                             00000000 
 * 82 DIV_4      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 MUL_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     a3 _LDIV_15   0010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 LB_4       fa WFI_2      0010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * 86 _LCSRRS_1  b0 CSRRW_3    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 87 MRET_7     46 ILL_1      0010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * 88 DIV_5      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 LB_5       fe ILLe       0010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * 8a DIV_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b JALR_2     5e LHU_1      0000000001101100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * 8c XOR_0      a9 ILL_4      0010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e LDAF_2     fe ILLe       0000110000001110001011000x00100110        Store 4 to mcause                                 40004033 sloppy xor     
 * 8f SUB_1      b1 aF_SW_3    0010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * 90 AND_1      b0 CSRRW_3    0010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * 91 SW_E3      96 SH_1       0010000000000000101111001100100110        Q = 3                                             00000000 
 * 92 LHU_1      b0 CSRRW_3    0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 93 LDAF_LHU   91 LDAF_2     0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 94 eFetch3    b0 CSRRW_3    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * 95 condb_2    3d SRxI_2     0010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * 96 LDAF_3     5a SB_1       0000000000001101100111100x00001xx0        PC to mepc                                        00000000 
 * 97 eFetch2    a6 ECAL_RET   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * 98 BLT        95 SW_E3      0000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 DIV_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004067 close to jalr
 * 9a SW_1       b0 CSRRW_3    0000000000000011111011100100001xx0        Write d to a+k until accepted                     00000000 
 * 9b SW_E1SWE      (use dinx) 0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 9c DIV_E      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d condb_4    fe ILLe       0010000000000000110011101101001xx0        Branch on condition                               00000000 
 * 9e ECALL_4    e6 StdIncPc   0010000000000000101011001100100110        Q = 4                                             00000000 
 * 9f ANDI_1     74 BrOpFet    0000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * a0 LHU_0      92 LDAF_3     0100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 MRET_3     d1 MRET_1     0010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * a2 DIVU_5     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 XORI_1     fe ILLe       0000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   0000500f close to fence
 * a4 SRxI_0     bd IJ_4       0010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 OR_1       be IJ_1       0000000000001000111011101000000xx0        RS1^0xffffffff to jj                              00000000 
 * a6 SW_E2      4e eILL0b     0000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * a7 LDAF_a     df eFetch     0010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * a8 _L0x99     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00005023 close to store
 * a9 XOR_1      b0 CSRRW_3    0010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                00000000 
 * aa DIV_10     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab _LMULHU_1  45 WFI_3      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * ac _L0xac     c9 MRET_2     0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     c9 MRET_2     0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af SLTX_1     47 ILL_2      0010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * b0 JAL_3      ce _LCSRRCI_1 0100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * b1 ILL_4      96 SH_1       0000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * b2 LHU_2      f2 SW_2       0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * b3 aFaultc       (use dinx) 0000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * b4 SLLI_1        (use dinx) 0000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * b5 ECALL_2    d6 eILL0c     0000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * b6 ILL_5      45 WFI_3      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * b7 ORI_1      37 ECALL_2    0010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * b8 BGE        95 SW_E3      0000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 DIV_14     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba SH_1       9f SH_5       0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * bb SW_E1SWH   4b CSRRW_2    0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * bc CSRRWI_0   61 EBRKWFI2   0000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd SRxI_1     f2 SW_2       0000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * be MRET_4     0b JALR_2     0010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * bf SRxI_2     5d SB_2       0000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                00000000 
 * c0 DIV_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 CSRRW_3    70 LHU_2      0010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * c2 DIV_6      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 MUL_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      b7 IJ_3       0000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 SLL_1      71 aFaultc    0010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * c6 _LDIV_11   cf MRET_7     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * c7 _LMULHU_5  69 _LDIV_13   0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * c8 DIV_e      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006023 close to store
 * c9 SRx_1      a1 ECALL_4    0010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * ca DIV_D      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb ILL_1      5e LHU_1      0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * cc OR_0       a5 MRET_3     0010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce CSRRW_4    fe ILLe       0100000010001010110111000100100110        IncPC, OpFetch, but force +4                      40006033 sloppy or      
 * cf ILL_2      11 AND_1      0000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * d0 CSRRW_2    b5 SH_3       0000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * d1 ECALL_5    65 WFI_4      0010000000000000101011001100100110        Q = 8                                             00000000 
 * d2 ECAL_RET   7f JALRE2     0010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * d3 EBRKWFI1   21 XORI_1     0010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * d4 LH_4       96 SH_1       0010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * d5 LH_5          (use dinx) 0010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * d6 SH_4       fe ILLe       1110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * d7 LH_3       9e SH_4       0010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * d8 BLTU       95 SW_E3      0000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 DIVU_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da LB_2       8e _LCSRRS_1  0010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     00000000 
 * db aFaultd    96 SH_1       0000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * dc CSRRSI_0   61 EBRKWFI2   0000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd SB_1       ee eILL0a     0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * de aFault_2   14 condb_3    0000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * df EBRKWFI2   14 condb_3    0000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         00000000 
 * e0 DIVU_4     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 jFault_1   09 LB_5       0000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * e2 DIV_7      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 MULH_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     9f SH_5       0010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 WFI_4      49 CSRRW_1    0010000000000000001011x01001xxxxx0        Prepare read PC                                   00000000 
 * e6 SH_5       f2 SW_2       0000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * e7 (null)     21 XORI_1     00x000000000000000xxxx00x00x0xxxxx QINT_0                                                   00000000 
 * e8 DIVU_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 _LDIV_13   57 LH_5       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * ea eILL0c     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007023 close to store
 * eb ECALL_3    d4 aFault_2   0000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * ec AND_0      90 NMI_2      0010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee aF_SW_2    fe ILLe       0010000000000000101011001100100110        Q = 4                                             40007033 sloppy and     
 * ef SB_4       f2 SW_2       1110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * f0 _LDIV_C    f4 Fetch2     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f1 WFI_2      21 XORI_1     0010000000000000101011101100100110        Check offset                                      00000000 
 * f2 Fetch      5e LHU_1      0000000000001000001111101010110000  Fr00  Read and latch instruction                        00000000 
 * f3 eFetch     6b SB_4       0001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * f4 LBU_3         (use dinx) 0010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * f5 BAERR_1    e1 ORI_1      0000000000001111110011101000001xx0        Faultadr to mtval. Prepare get offset             00000000 
 * f6 _LDIV_15   f1 aFaulte    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f7 (null)     07 LB_4       00x000000000000000xxxx00x00x0xxxxx QINT_0                                                   00000000 
 * f8 BGEU       95 SW_E3      0000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa LBU_2      51 LDAF_LW    0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * fb aFaulte    ef WFI_5      0000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * fc CSRRCI_0   61 EBRKWFI2   0000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      36 SLLI_2     0010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       cb QINT_2     0010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     67 SW_E1SWE   0010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 

 * Candidate function 2040, used ffff, inputs 17
 *                             Microcode instruction
 * uPC           next uPC      44333333333322222222221111111111
 * || label      || next label 1098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ---------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       a5 MRET_3     0110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 SRx_1      12 eFetch3    0010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * 02 IJ_0       b2 CSRRW_4    0010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~3u]. inCSR=0               0000000b ij       
 * 03 _L0x03     4e eILL0b     0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     4e eILL0b     0000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00000017 auipc   
 * 06 condb_5    ab EBREAK_2   0100000010001010110111000100110110        Branch not taken.                                 00000000 
 * 07 condb_5t   af MRET_4     0100000001101010110111101100100000        Branch taken.                                     00000000 
 * 08 _L0x08     61 EBRKWFI2   0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 ILL_1      ffffffff (null)     0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * 0a _L0x0a     61 EBRKWFI2   0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b ORI_2      26 OR_1       0000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 0c ADD_0      04 ADDI_0     0010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     4e eILL0b     0000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      c5 MRET_5     0010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     4e eILL0b     0000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 JAL_1      ffffffff (null)     0000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 11 JAERR_1    d3 aFaultd    0000000000001111001011100x00100000  Err   JAL target adr misaligned, store to mtval         00000000 
 * 12 LB_2          (use dinx) 0010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     00000000 
 * 13 aFaultd    1d ORI_2      0000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * 14 eILL0b     d2 LB_2       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 15 MRET_8     06 LB_3       0010000000000000101011101100100110        Prep +4                                           00000000 
 * 16 BAERR_4    52 LH_1       0000110000001110100111100x00001xx0        Store 0 to mcause. Prep get trap entry pont       00000000 
 * 17 CSRRWI_1   9a ECALL_6    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 18 BEQ        cf MRET_7     0000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     55 aFaultb    0000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a IJ_2       4e eILL0b     0000000000001100101011101000110000        Read word is to be masked with 2 lsb = 00         00000000 
 * 1b _L0x1b     10 SUB_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000006f jal     
 * 1c ECAL_BRK   f0 LBU_2      0010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d condb_3    4e eILL0b     0010000000000000001011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 1e NMI_1      dd aF_SW_1    0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 1f LASTINCH   74 BrOpFet    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Reserved to facilitate manual equation            00000000 
 * 20 LH_0       50 LW_1       0100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 ILL_2      4e eILL0b     0000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * 22 MULHU_6    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     4e eILL0b     0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     f2 SW_2       0010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00001017 auipc   
 * 26 JAL_2      2b SLTIX_1    0000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 27 JALRE1     0b JALR_2     0000000000001101110011100x00001xx0  err   Store pc to mepc                                  00000000 
 * 28 _L0x28     ea _LMULHU_5  0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 CSRRW_2    d4 aFault_2   0000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * 2a _L0x2a     ea _LMULHU_5  0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b OR_2       3a SRxI_1     0010000000000000000011101100100000        Q = rs2                                           00000000 
 * 2c SLL_0      fb SB_3       0010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     4e eILL0b     0000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e aFault_1   fe ILLe       0010000000000000101011001100100110        Q = 4                                             40001033 sloppy sll     
 * 2f _L0x2f     4e eILL0b     0000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 LW_1       4e eILL0b     0001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 31 LDAF_LW    3d SRxI_2     0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 32 eILL0c     26 OR_1       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 33 ECALL_3    3e SLL_1      0000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * 34 eILL0a     52 LH_1       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 35 WFI_5      45 WFI_3      0100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * 36 JALRE2     03 _L0x03     0000000000001111101011100x00001xx0        mtval is target                                   00000000 
 * 37 IJ_4       33 JAERR_1    0100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * 38 BNE        cf MRET_7     0000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a SLTIX_2    fa WFI_2      0000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 3b _L0x3b     10 SUB_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000106f jal     
 * 3c CSRRW_0    6e _LDIV_C    0000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d SLTIX_1    03 _L0x03     0010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             00000000 
 * 3e JAERR_2    f2 SW_2       0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * 3f MRET_5     f4 Fetch2     0010000000000000000011101100010xx0        ~302                                              00000000 
 * 40 LW_0       30 SLTIX_2    0110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 LH_4       b4 LASTINCH   0010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * 42 MULHU_2    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 DIVU_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     3d SRxI_2     0010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 SLLI_2     81 JAERR_2    0000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 46 ECALL_1    21 XORI_1     0010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 00000000 
 * 47 MRET_1     86 JAL_2      0000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * 48 _L0x48     b0 CSRRW_3    1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 LH_5       29 XOR_1      0010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * 4a _L0x4a     b0 CSRRW_3    1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b SB_2       c6 IJT_4      0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 4c SLT_0      e7 aFault     0010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e StdIncPc   fe ILLe       0100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    40002033 sloppy slt     
 * 4f aFault     4e eILL0b     0000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * 50 LH_1       4e eILL0b     0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 51 LDAF_LH    9f SH_5       0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 52 Fetch      70 LHU_2      0000000000001000001111101010110000  Fr00  Read and latch instruction                        00000000 
 * 53 eFetch     9f SH_5       0001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * 54 NMI_2      d7 ECALL_3    0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 55 JALR_1     2e _LMULHU_1  0010000000000000000011101100100110        Q=1                                               00000000 
 * 56 LBU_1      49 CSRRW_1    0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 57 IJT_4      ffffffff (null)     0100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * 58 MULHU_4    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_A      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a SW_E4      4b CSRRW_2    0000110000001110100111100x00101000        Store 6 to mcause                                 00000000 
 * 5b _L0x5b     10 SUB_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000206f jal     
 * 5c CSRRS_0    6e _LDIV_C    0000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d WFI_3      a3 _LDIV_15   0010000000000000101011101100100110        More check offset                                 00000000 
 * 5e _LDIV_F    d0 ECALL_1    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 5f QINT_1     9f SH_5       0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 60 DIV_B      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 SB_1       67 SW_E1SWE   0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * 62 MULHU_3    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 MUL_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    3d SRxI_2     0010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 ECALL_6    35 SLLI_1     0000110000001110100111000x00100000        mcause = 11                                       00000000 
 * 66 WFI_1      ba LHU_3      0010000000000000000011001100100110 WFI    To check offset                                   00000000 
 * 67 EBREAK_1   96 SH_1       0000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * 68 DIV_8      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 EBRKWFI2   fe ILLe       0000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         00000000 
 * 6a DIV_9      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b aF_SW_3    e9 IJT_3      0000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * 6c SLTU_0     e7 aFault     0010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e CSRRW_1    fe ILLe       0010000000000000000011101100100110        Construct PC storage adr                          40003033 sloppy sltu    
 * 6f SH_3       7f JALRE2     0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 70 LH_2       ffffffff (null)     0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 71 aFaultb    2e _LMULHU_1  0000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 72 LBU_2      d3 aFaultd    0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 73 aFaulte    e1 ORI_1      0000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * 74 IJ_3       92 LDAF_3     0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 75 MRET_6     c9 MRET_2     0010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 76 _LCSRRS_1  7d BAERR_4    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 77 _LCSRRCI_1 16 condb_5    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 78 DIV_12     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 MULH_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a SH_2       ba LHU_3      0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * 7b _L0x7b     10 SUB_1      0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000306f jal     
 * 7c CSRRC_0    6e _LDIV_C    0000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d BAERR_3    ef WFI_5      0000000000001101101011100x00100110        origPC to mepc. Prep read 0                       00000000 
 * 7e LDAF_3     54 LH_2       0000000000001101100111100x00001xx0        PC to mepc                                        00000000 
 * 7f MRET_7     16 condb_5    0010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * 80 LBU_0      56 LH_4       0110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 WFI_4      16 condb_5    0010000000000000001011x01001xxxxx0        Prepare read PC                                   00000000 
 * 82 DIV_4      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 MUL_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     d4 aFault_2   0010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 IJT_2      72 LBU_3      0000000000001100101011101000110000        Read word is to be masked with ~3u                00000000 
 * 86 ILL_3      ef WFI_5      0010000000000000101011101100100110        Q = 1                                             00000000 
 * 87 MRET_2     36 SLLI_2     0010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * 88 DIV_5      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 _LDIV_13   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 8a DIV_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b QINT_2     4e eILL0b     0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 8c XOR_0      db jFault_1   0010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e LDAF_2     fe ILLe       0000110000001110001011000x00100110        Store 4 to mcause                                 40004033 sloppy xor     
 * 8f aF_SW_1    b5 SH_3       0000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * 90 LHU_1      ef WFI_5      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 91 LDAF_LHU   7e NMI_1      0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 92 Fetch2     ef WFI_5      000000000xx11011111111111100100000  Fr00  Update ttime. Update I. Q=immediate. Use dinx     00000000 
 * 93 jFault     95 SW_E3      0000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * 94 IJT_3      ef WFI_5      0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 95 SW_E3      5a SB_1       0010000000000000101111001100100110        Q = 3                                             00000000 
 * 96 SW_E2      7a SB_5       0000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * 97 eFetch2    96 SH_1       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * 98 BLT        cf MRET_7     0000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 DIV_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004067 close to jalr
 * 9a BrOpFet    ef WFI_5      0011001010000000101111101010001xx0 NewOp2 Read until instruction latched                    00000000 
 * 9b BAlignEr      (use dinx) 0010000000000000001011x00x00xxxxx0  Err   Branch target instruction address misaligned      00000000 
 * 9c DIV_E      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d ECALL_4    fe ILLe       0010000000000000101011001100100110        Q = 4                                             00000000 
 * 9e ILL_5      d6 eILL0c     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 9f LDAF_a     ba LHU_3      0010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * a0 LHU_0      90 NMI_2      0100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 SB_4       d5 eFetch2    1110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * a2 DIVU_5     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 SB_3       fe ILLe       0010000000000000000011101000110000        Prepare get back address to use                   0000500f close to fence
 * a4 SRxI_0     f4 Fetch2     0010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 LB_1       bd IJ_4       0010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * a6 MRET_3     46 ILL_1      0010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * a7 LB_3       69 _LDIV_13   0010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * a8 _L0x99     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00005023 close to store
 * a9 _LDIV_C    ef WFI_5      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * aa DIV_10     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab LB_4       65 WFI_4      0010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * ac _L0xac     01 LB_1       0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     01 LB_1       0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af LB_5       3f SRx_1      0010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * b0 SW_1       ce _LCSRRCI_1 0000000000000011111011100100001xx0        Write d to a+k until accepted                     00000000 
 * b1 SW_E1SWE   7e NMI_1      0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * b2 IJ_1       52 LH_1       0010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~3u]                   00000000 
 * b3 IJT_1         (use dinx) 0010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * b4 JALR_2        (use dinx) 0000000001101100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * b5 ILL_4      be IJ_1       0000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * b6 _LDIV_11   65 WFI_4      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * b7 ORI_1      37 ECALL_2    0010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * b8 BGE        cf MRET_7     0000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 DIV_14     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba SW_2       d3 aFaultd    0010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * bb aF_SW      6f MRET_6     0010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * bc CSRRWI_0   6e _LDIV_C    0000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd MRET_4     52 LH_1       0010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * be SH_4       1a ANDI_1     1110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * bf _LMULHU_5  85 LBU_1      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * c0 DIV_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 LBU_3      94 SW_E4      0010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * c2 DIV_6      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 MUL_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      b7 IJ_3       0000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 SUB_1      75 BAlignEr   0010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * c6 CSRRW_3    21 XORI_1     0010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * c7 AND_1      8b LB_6       0010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * c8 DIV_e      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006023 close to store
 * c9 BAERR_1    a6 ECAL_RET   0000000000001111110011101000001xx0        Faultadr to mtval. Prepare get offset             00000000 
 * ca DIV_D      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb eFetch3    4e eILL0b     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * cc OR_0       da LDAF_a     0010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce CSRRW_4    fe ILLe       0100000010001010110111000100100110        IncPC, OpFetch, but force +4                      40006033 sloppy or      
 * cf condb_2    15 condb_4    0010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * d0 LHU_2      f3 aF_SW      0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * d1 aFaultc    87 JALRE1     0000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * d2 condb_4    a7 EBRKWFI1   0010000000000000110011101101001xx0        Branch on condition                               00000000 
 * d3 ANDI_1     2e _LMULHU_1  0000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * d4 XORI_1     7e NMI_1      0000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   00000000 
 * d5 ECALL_5       (use dinx) 0010000000000000101011001100100110        Q = 8                                             00000000 
 * d6 SH_5       fe ILLe       0000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * d7 LH_3       9d _LDIV_11   0010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * d8 BLTU       cf MRET_7     0000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 DIVU_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da OR_1       8e _LCSRRS_1  0000000000001000111011101000000xx0        RS1^0xffffffff to jj                              00000000 
 * db XOR_1      7e NMI_1      0010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                00000000 
 * dc CSRRSI_0   6e _LDIV_C    0000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd aFault_2   ee eILL0a     0000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * de _LDIV_15   92 LDAF_3     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * df (null)     92 LDAF_3     00x000000000000000xxxx00x00x0xxxxx QINT_0                                                   00000000 
 * e0 DIVU_4     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 BAERR_2    0b JALR_2     0010000000000000001011101100000xx0        ~offset to Q. Prep read (origPC+offset)           00000000 
 * e2 DIV_7      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 MULH_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     d3 aFaultd    0010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 _LMULHU_1  6b SB_4       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * e6 jFault_1   52 LH_1       0000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * e7 SLTX_1     2e _LMULHU_1  0010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * e8 DIVU_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 SB_5       57 LH_5       0000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * ea SH_1       fe ILLe       0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        40007023 close to store
 * eb SW_E1SWH   41 JALR_1     0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * ec AND_0      c7 QINT_1     0010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee aF_SW_2    fe ILLe       0010000000000000101011001100100110        Q = 4                                             40007033 sloppy and     
 * ef JAL_3      52 LH_1       0100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * f0 ECAL_RET   c1 IJT_2      0010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * f1 EBRKWFI1   2e _LMULHU_1  0010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * f2 SLLI_1     4e eILL0b     0000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * f3 ECALL_2    8f ILL_3      0000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * f4 SRxI_1        (use dinx) 0000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * f5 WFI_2      e6 StdIncPc   0010000000000000101011101100100110        Check offset                                      00000000 
 * f6 EBREAK_2   f5 jFault     0000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * f7 (null)     f6 WFI_1      00x000000000000000xxxx00x00x0xxxxx QINT_0                                                   00000000 
 * f8 BGEU       cf MRET_7     0000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa SRxI_2     5d SB_2       0000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                00000000 
 * fb SLL_1      a1 ECALL_4    0010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * fc CSRRCI_0   6e _LDIV_C    0000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      1e aFault_1   0010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       09 LB_5       0010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     5f LDAF_LHU   0010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 
 *   9 446  91 231 
 * Candidate function 4200, used ffff, inputs 1b
 *                             Microcode instruction
 * uPC           next uPC      44333333333322222222221111111111
 * || label      || next label 1098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ---------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       5d SB_2       0110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 EBREAK_2   c6 IJT_4      0000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * 02 IJ_0       16 condb_5    0010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~3u]. inCSR=0               0000000b ij       
 * 03 _L0x03     7e NMI_1      0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     7e NMI_1      0000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00000017 auipc   
 * 06 JAL_1      6b SB_4       0000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 07 JAERR_1    70 LHU_2      0000000000001111001011100x00100000  Err   JAL target adr misaligned, store to mtval         00000000 
 * 08 _L0x08     b6 ECALL_5    0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 ORI_2      ffffffff (null)     0000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 0a _L0x0a     b6 ECALL_5    0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b IJ_2       3e SLL_1      0000000000001100101011101000110000        Read word is to be masked with 2 lsb = 00         00000000 
 * 0c ADD_0      04 ADDI_0     0010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     7e NMI_1      0000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      73 BAERR_1    0010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     7e NMI_1      0000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 eILL0b     ffffffff (null)     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 11 MRET_8     89 _LDIV_F    0010000000000000101011101100100110        Prep +4                                           00000000 
 * 12 BrOpFet       (use dinx) 0011001010000000101111101010001xx0 NewOp2 Read until instruction latched                    00000000 
 * 13 BAlignEr   1a ANDI_1     0010000000000000001011x00x00xxxxx0  Err   Branch target instruction address misaligned      00000000 
 * 14 eILL0a     7d BAERR_4    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 15 WFI_5      1e aFault_1   0100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * 16 IJ_1       e6 StdIncPc   0010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~3u]                   00000000 
 * 17 IJT_1      ffffffff (null)     0010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * 18 BEQ        77 BAERR_3    0000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     55 aFaultb    0000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a condb_3    7e NMI_1      0010000000000000001011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 1b _L0x1b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000006f jal     
 * 1c ECAL_BRK   a6 ECAL_RET   0010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d OR_2       7e NMI_1      0010000000000000000011101100100000        Q = rs2                                           00000000 
 * 1e condb_5    de Fetch      0100000010001010110111000100110110        Branch not taken.                                 00000000 
 * 1f condb_5t   49 CSRRW_1    0100000001101010110111101100100000        Branch taken.                                     00000000 
 * 20 LH_0       46 ILL_1      0100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 CSRRWI_1   7e NMI_1      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 22 MULHU_6    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     7e NMI_1      0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     97 SW_E1SWH   0010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00001017 auipc   
 * 26 LW_1       1d ORI_2      0001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 27 LDAF_LW    09 LB_5       0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 28 _L0x28     8e _LCSRRS_1  0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 SLLI_2     8b LB_6       0000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 2a _L0x2a     8e _LCSRRS_1  0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b SB_2       51 LDAF_LW    0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 2c SLL_0      a9 ILL_4      0010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     7e NMI_1      0000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e NMI_2      fe ILLe       0000110000001111010011101000110000        mtval = 0.                                        40001033 sloppy sll     
 * 2f _L0x2f     7e NMI_1      0000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 eILL0b     7e NMI_1      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 31 MRET_8     3a SRxI_1     0010000000000000101011101100100110        Prep +4                                           00000000 
 * 32 SW_2       3e SLL_1      0010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * 33 aF_SW      db jFault_1   0010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * 34 SW_E4      e6 StdIncPc   0000110000001110100111100x00101000        Store 6 to mcause                                 00000000 
 * 35 aFault_1   29 XOR_1      0010000000000000101011001100100110        Q = 4                                             00000000 
 * 36 ECALL_6    03 _L0x03     0000110000001110100111000x00100000        mcause = 11                                       00000000 
 * 37 aF_SW_3    cf MRET_7     0000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * 38 BNE        77 BAERR_3    0000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a SLTIX_1    a3 _LDIV_15   0010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             00000000 
 * 3b _L0x3b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000106f jal     
 * 3c CSRRW_0    71 aFaultc    0000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d SH_3       03 _L0x03     0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 3e JAL_2      97 SW_E1SWH   0000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 3f JALRE1     9f SH_5       0000000000001101110011100x00001xx0  err   Store pc to mepc                                  00000000 
 * 40 LW_0       26 OR_1       0110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 LASTINCH   72 LBU_3      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Reserved to facilitate manual equation            00000000 
 * 42 MULHU_2    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 DIVU_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     3a SRxI_1     0010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 IJ_4       bb SH_2       0100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * 46 LH_1       b0 CSRRW_3    0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 47 LDAF_LH    91 LDAF_2     0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 48 _L0x48     6e _LDIV_C    1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 IJ_3       b2 CSRRW_4    0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 4a _L0x4a     6e _LDIV_C    1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b SH_2       d1 MRET_1     0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * 4c SLT_0      94 SW_E4      0010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e LH_2       fe ILLe       0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     40002033 sloppy slt     
 * 4f aFaultb    7e NMI_1      0000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 50 IJT_2      7e NMI_1      0000000000001100101011101000110000        Read word is to be masked with ~3u                00000000 
 * 51 SLTIX_2    c1 IJT_2      0000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 52 MRET_2     4e eILL0b     0010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * 53 QINT_2     c1 IJT_2      0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 54 aF_SW_1    e5 aF_SW_2    0000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * 55 JALR_1     35 SLLI_1     0010000000000000000011101100100110        Q=1                                               00000000 
 * 56 IJT_3      b4 LASTINCH   0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 57 SB_3       ffffffff (null)     0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 58 MULHU_4    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_A      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a WFI_3      2b SLTIX_1    0010000000000000101011101100100110        More check offset                                 00000000 
 * 5b _L0x5b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000206f jal     
 * 5c CSRRS_0    71 aFaultc    0000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d LB_1       57 LH_5       0010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * 5e ECALL_1    86 JAL_2      0010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 00000000 
 * 5f MRET_1     c1 IJT_2      0000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * 60 DIV_B      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 MRET_5     9b ILL_5      0010000000000000000011101100010xx0        ~302                                              00000000 
 * 62 MULHU_3    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 MUL_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    3a SRxI_1     0010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 IJT_4      15 condb_4    0100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * 66 LHU_1      32 JAL_1      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 67 LDAF_LHU   f2 SW_2       0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 68 DIV_8      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 LB_3       fe ILLe       0010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * 6a DIV_9      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b LB_4       d3 aFaultd    0010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * 6c SLTU_0     94 SW_E4      0010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e SW_1       fe ILLe       0000000000000011111011100100001xx0        Write d to a+k until accepted                     40003033 sloppy sltu    
 * 6f SW_E1SWE   a1 ECALL_4    0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 70 LB_5       ffffffff (null)     0010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * 71 CSRRW_1    35 SLLI_1     0010000000000000000011101100100110        Construct PC storage adr                          00000000 
 * 72 JALR_2     89 _LDIV_F    0000000001101100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * 73 SUB_1      d2 LB_2       0010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * 74 AND_1      ee eILL0a     0010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * 75 MRET_6     d0 ECALL_1    0010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 76 eFetch3    7a SB_5       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * 77 condb_2    d4 aFault_2   0010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * 78 DIV_12     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 MULH_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a BAERR_3    32 JAL_1      0000000000001101101011100x00100110        origPC to mepc. Prep read 0                       00000000 
 * 7b _L0x7b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000306f jal     
 * 7c CSRRC_0    71 aFaultc    0000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d condb_4    96 SH_1       0010000000000000110011101101001xx0        Branch on condition                               00000000 
 * 7e StdIncPc   2e _LMULHU_1  0100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    00000000 
 * 7f aFault     d4 aFault_2   0000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * 80 LBU_0      dd aF_SW_1    0110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 QINT_1     d4 aFault_2   0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 82 DIV_4      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 MUL_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     8b LB_6       0010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 _LCSRRCI_1 ea _LMULHU_5  0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 86 LHU_2      96 SH_1       0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 87 aFaultc    d7 ECALL_3    0000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * 88 DIV_5      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 ANDI_1     fe ILLe       0000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * 8a DIV_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b XORI_1     7e NMI_1      0000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   00000000 
 * 8c XOR_0      92 LDAF_3     0010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e SH_1       fe ILLe       0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        40004033 sloppy xor     
 * 8f SW_E1SWH   ba LHU_3      0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 90 OR_1       96 SH_1       0000000000001000111011101000000xx0        RS1^0xffffffff to jj                              00000000 
 * 91 ILL_3      f0 LBU_2      0010000000000000101011101100100110        Q = 1                                             00000000 
 * 92 XOR_1      96 SH_1       0010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                00000000 
 * 93 _LMULHU_1  9e SH_4       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 94 SLTX_1     96 SH_1       0010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * 95 LDAF_2     34 JAL_3      0000110000001110001011000x00100110        Store 4 to mcause                                 00000000 
 * 96 JAL_3      4b CSRRW_2    0100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * 97 SLLI_1     f2 SW_2       0000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * 98 BLT        77 BAERR_3    0000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 DIV_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004067 close to jalr
 * 9a WFI_1      96 SH_1       0010000000000000000011001100100110 WFI    To check offset                                   00000000 
 * 9b EBREAK_1      (use dinx) 0000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * 9c DIV_E      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d ECALL_2    fe ILLe       0000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * 9e SW_E3      f7 EBREAK_1   0010000000000000101111001100100110        Q = 3                                             00000000 
 * 9f SRxI_1     32 JAL_1      0000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * a0 LHU_0      66 SW_1       0100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 MRET_7     da LDAF_a     0010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * a2 DIVU_5     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 SRxI_2     fe ILLe       0000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                0000500f close to fence
 * a4 SRxI_0     9f SH_5       0010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 eFetch2    be IJ_1       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * a6 ECAL_RET   5e LHU_1      0010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * a7 EBRKWFI1   b7 IJ_3       0010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * a8 _L0x99     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00005023 close to store
 * a9 SLL_1      96 SH_1       0010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * aa DIV_10     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab SRx_1      36 SLLI_2     0010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * ac _L0xac     ab EBREAK_2   0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     ab EBREAK_2   0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af ILL_1      61 EBRKWFI2   0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * b0 ILL_2      d5 eFetch2    0000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * b1 ECALL_4    f0 LBU_2      0010000000000000101011001100100110        Q = 4                                             00000000 
 * b2 CSRRW_2    e6 StdIncPc   0000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * b3 LH_4          (use dinx) 0010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * b4 LH_5          (use dinx) 0010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * b5 MRET_3     f6 WFI_1      0010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * b6 SB_1       36 SLLI_2     0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * b7 EBRKWFI2   45 WFI_3      0000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         00000000 
 * b8 BGE        77 BAERR_3    0000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 DIV_14     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba ILL_4      89 _LDIV_F    0000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * bb WFI_4      3d SRxI_2     0010000000000000001011x01001xxxxx0        Prepare read PC                                   00000000 
 * bc CSRRWI_0   71 aFaultc    0000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd _LDIV_13   e6 StdIncPc   0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * be MRET_4     0b JALR_2     0010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * bf SB_4       50 LW_1       1110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * c0 DIV_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 LDAF_a     56 LH_4       0010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * c2 DIV_6      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 MUL_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      c5 MRET_5     0000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 ORI_1      75 BAlignEr   0010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * c6 LB_2       b0 CSRRW_3    0010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     00000000 
 * c7 aFaultd    53 LDAF_LH    0000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * c8 DIV_e      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006023 close to store
 * c9 _LDIV_C    b5 SH_3       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * ca DIV_D      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb LBU_3      7e NMI_1      0010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * cc OR_0       90 NMI_2      0010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce eILL0c     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40006033 sloppy or      
 * cf ECALL_3    31 SLTX_1     0000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * d0 BAERR_1    9d _LDIV_11   0000000000001111110011101000001xx0        Faultadr to mtval. Prepare get offset             00000000 
 * d1 CSRRW_3    52 LH_1       0010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * d2 BAERR_2    69 _LDIV_13   0010000000000000001011101100000xx0        ~offset to Q. Prep read (origPC+offset)           00000000 
 * d3 SB_5       35 SLLI_1     0000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * d4 BAERR_4    f0 LBU_2      0000110000001110100111100x00001xx0        Store 0 to mcause. Prep get trap entry pont       00000000 
 * d5 CSRRW_4       (use dinx) 0100000010001010110111000100100110        IncPC, OpFetch, but force +4                      00000000 
 * d6 NMI_1      fe ILLe       0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * d7 JALRE2     b1 aF_SW_3    0000000000001111101011100x00001xx0        mtval is target                                   00000000 
 * d8 BLTU       77 BAERR_3    0000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 DIVU_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da ECALL_5    95 SW_E3      0010000000000000101011001100100110        Q = 8                                             00000000 
 * db JAERR_2    f0 LBU_2      0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * dc CSRRSI_0   71 aFaultc    0000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd LBU_1      f5 jFault     0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * de aFault_2   ee eILL0a     0000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * df _LDIV_F    ee eILL0a     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * e0 DIVU_4     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 _LMULHU_5  09 LB_5       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * e2 DIV_7      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 MULH_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     89 _LDIV_F    0010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 LH_3       37 ECALL_2    0010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * e6 Fetch      e6 StdIncPc   0000000000001000001111101010110000  Fr00  Read and latch instruction                        00000000 
 * e7 eFetch     35 SLLI_1     0001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * e8 DIVU_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 _LCSRRS_1  65 WFI_4      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * ea LBU_2      fe ILLe       0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     40007023 close to store
 * eb aFaulte    b3 CSRRWI_1   0000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * ec AND_0      74 BrOpFet    0010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee Fetch2     fe ILLe       000000000xx11011111111111100100000  Fr00  Update ttime. Update I. Q=immediate. Use dinx     40007033 sloppy and     
 * ef jFault     e6 StdIncPc   0000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * f0 LDAF_3     cb QINT_2     0000000000001101100111100x00001xx0        PC to mepc                                        00000000 
 * f1 jFault_1   35 SLLI_1     0000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * f2 SW_E2      7e NMI_1      0000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * f3 ILL_5      54 LH_2       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * f4 _LDIV_11      (use dinx) 0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f5 aF_SW_2    f1 aFaulte    0010000000000000101011001100100110        Q = 4                                             00000000 
 * f6 SH_4       fa WFI_2      1110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * f7 SH_5       01 LB_1       0000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * f8 BGEU       77 BAERR_3    0000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa WFI_2      5a SB_1       0010000000000000101011101100100110        Check offset                                      00000000 
 * fb _LDIV_15   bf IJT_1      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * fc CSRRCI_0   71 aFaultc    0000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      d6 eILL0c     0010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       af MRET_4     0010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     81 JAERR_2    0010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 

 * Candidate function 8040, used ffff, inputs 93
 *                             Microcode instruction
 * uPC           next uPC      44333333333322222222221111111111
 * || label      || next label 1098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ---------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       61 EBRKWFI2   0110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 ORI_2      54 LH_2       0000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 02 IJ_0       8e _LCSRRS_1  0010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~3u]. inCSR=0               0000000b ij       
 * 03 _L0x03     32 JAL_1      0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     32 JAL_1      0000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00000017 auipc   
 * 06 JAL_1      69 _LDIV_13   0000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 07 JAERR_1    6b SB_4       0000000000001111001011100x00100000  Err   JAL target adr misaligned, store to mtval         00000000 
 * 08 _L0x08     c7 QINT_1     0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 IJ_2       ffffffff (null)     0000000000001100101011101000110000        Read word is to be masked with 2 lsb = 00         00000000 
 * 0a _L0x0a     c7 QINT_1     0000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b OR_2       16 condb_5    0010000000000000000011101100100000        Q = rs2                                           00000000 
 * 0c ADD_0      04 ADDI_0     0010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     32 JAL_1      0000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      77 BAERR_3    0010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     32 JAL_1      0000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 LW_1       ffffffff (null)     0001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 11 LDAF_LW    95 SW_E3      0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 12 condb_5       (use dinx) 0100000010001010110111000100110110        Branch not taken.                                 00000000 
 * 13 condb_5t   1a ANDI_1     0100000001101010110111101100100000        Branch taken.                                     00000000 
 * 14 LH_1       94 SW_E4      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 15 LDAF_LH    12 eFetch3    0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 16 JAL_2      6e _LDIV_C    0000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 17 JALRE1     86 JAL_2      0000000000001101110011100x00001xx0  err   Store pc to mepc                                  00000000 
 * 18 BEQ        8b LB_6       0000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     56 LH_4       0000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a condb_3    32 JAL_1      0010000000000000001011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 1b _L0x1b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000006f jal     
 * 1c ECAL_BRK   50 LW_1       0010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d SLLI_2     32 JAL_1      0000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 1e ECALL_1    df eFetch     0010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 00000000 
 * 1f MRET_1     41 JALR_1     0000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * 20 LH_0       14 condb_3    0100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 SB_2       32 JAL_1      0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 22 MULHU_6    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     32 JAL_1      0010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     af MRET_4     0010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     0010000000000000001011x00100xxxxx0 AUIPC  q = imm20 (copy x/2)                              00001017 auipc   
 * 26 LH_2       0b JALR_2     0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 27 aFaultb    01 LB_1       0000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 28 _L0x28     4e eILL0b     0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 NMI_2      9d _LDIV_11   0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 2a _L0x2a     4e eILL0b     0000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b SW_E4      52 LH_1       0000110000001110100111100x00101000        Store 6 to mcause                                 00000000 
 * 2c SLL_0      b4 LASTINCH   0010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     32 JAL_1      0000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e ECALL_6    fe ILLe       0000110000001110100111000x00100000        mcause = 11                                       40001033 sloppy sll     
 * 2f _L0x2f     32 JAL_1      0000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 LHU_1      32 JAL_1      0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 31 LDAF_LHU   3e SLL_1      0000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 32 StdIncPc   16 condb_5    0100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    00000000 
 * 33 aFault     e6 StdIncPc   0000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * 34 SW_1       6e _LDIV_C    0000000000000011111011100100001xx0        Write d to a+k until accepted                     00000000 
 * 35 SW_E1SWE   1d ORI_2      0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 36 WFI_1      03 _L0x03     0010000000000000000011001100100110 WFI    To check offset                                   00000000 
 * 37 EBREAK_1   67 SW_E1SWE   0000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * 38 BNE        8b LB_6       0000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a aFault_1   b2 CSRRW_4    0010000000000000101011001100100110        Q = 4                                             00000000 
 * 3b _L0x3b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000106f jal     
 * 3c CSRRW_0    5e LHU_1      0000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d aF_SW_3    03 _L0x03     0000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * 3e SLTIX_1    af MRET_4     0010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             00000000 
 * 3f SH_3       b1 aF_SW_3    0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 40 LW_0       10 SUB_1      0110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 IJ_3       73 BAERR_1    0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 42 MULHU_2    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 MULHU_4    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     3e SLL_1      0010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 SH_2       ce _LCSRRCI_1 0000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * 46 LHU_2      ba LHU_3      0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 47 aFaultc    7a SB_5       0000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * 48 _L0x48     34 JAL_3      1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 IJT_2      bd IJ_4       0000000000001100101011101000110000        Read word is to be masked with ~3u                00000000 
 * 4a _L0x4a     34 JAL_3      1110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b MRET_2     d3 aFaultd    0010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * 4c SLT_0      a7 EBRKWFI1   0010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e SH_1       fe ILLe       0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        40002033 sloppy slt     
 * 4f SW_E1SWH   32 JAL_1      0000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 50 ECAL_RET   32 JAL_1      0010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * 51 EBRKWFI1   c9 MRET_2     0010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * 52 SLTIX_2    26 OR_1       0000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 53 QINT_2     c9 MRET_2     0000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 54 LB_2       e9 IJT_3      0010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     00000000 
 * 55 aFaultd    3a SRxI_1     0000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * 56 JALR_1     c6 IJT_4      0010000000000000000011101100100110        Q=1                                               00000000 
 * 57 aF_SW_1    ffffffff (null)     0000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * 58 DIV_A      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_B      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a WFI_3      21 XORI_1     0010000000000000101011101100100110        More check offset                                 00000000 
 * 5b _L0x5b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000206f jal     
 * 5c CSRRS_0    5e LHU_1      0000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d IJT_3      5f LDAF_LHU   0010000000000000110011001100100000        Construct Q = 3                                   00000000 
 * 5e CSRRW_1    46 ILL_1      0010000000000000000011101100100110        Construct PC storage adr                          00000000 
 * 5f SB_3       c9 MRET_2     0010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 60 MULHU_3    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 LB_1       37 ECALL_2    0010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * 62 DIV_8      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 DIV_9      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    3e SLL_1      0010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 LB_3       97 SW_E1SWH   0010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * 66 eILL0c     90 NMI_2      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 67 ECALL_3    ef WFI_5      0000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * 68 DIV_12     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 LB_4       fe ILLe       0010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * 6a MULH_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b LB_5       d6 eILL0c     0010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * 6c SLTU_0     a7 EBRKWFI1   0010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e Fetch      fe ILLe       0000000000001000001111101010110000  Fr00  Read and latch instruction                        40003033 sloppy sltu    
 * 6f eFetch     c1 IJT_2      0001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * 70 LBU_2      ffffffff (null)     0010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 71 aFaulte    3a SRxI_1     0000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * 72 MRET_6     95 SW_E3      0010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 73 JALR_2     d5 eFetch2    0000000001101100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * 74 Fetch2     74 BrOpFet    000000000xx11011111111111100100000  Fr00  Update ttime. Update I. Q=immediate. Use dinx     00000000 
 * 75 jFault     d4 aFault_2   0000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * 76 BAERR_3    76 BAERR_2    0000000000001101101011100x00100110        origPC to mepc. Prep read 0                       00000000 
 * 77 SUB_1      da LDAF_a     0010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * 78 DIV_4      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 DIV_5      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a ILL_3      90 NMI_2      0010000000000000101011101100100110        Q = 1                                             00000000 
 * 7b _L0x7b     06 LB_3       0010000001100000001011100100110000 JAL    J-imm is in q. Branch on alignfault               0000306f jal     
 * 7c CSRRC_0    5e LHU_1      0000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d AND_1      ab EBREAK_2   0010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * 7e LDAF_2     29 XOR_1      0000110000001110001011000x00100110        Store 4 to mcause                                 00000000 
 * 7f eFetch3    da LDAF_a     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * 80 LBU_0      e7 aFault     0110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 LASTINCH   da LDAF_a     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Reserved to facilitate manual equation            00000000 
 * 82 DIV_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 DIVU_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     9d _LDIV_11   0010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 IJ_4       70 LHU_2      0100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * 86 BrOpFet    ab EBREAK_2   0011001010000000101111101010001xx0 NewOp2 Read until instruction latched                    00000000 
 * 87 BAlignEr   de Fetch      0010000000000000001011x00x00xxxxx0  Err   Branch target instruction address misaligned      00000000 
 * 88 DIV_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 MRET_5     fe ILLe       0010000000000000000011101100010xx0        ~302                                              00000000 
 * 8a DIV_6      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b condb_2    32 JAL_1      0010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * 8c XOR_0      a3 _LDIV_15   0010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e IJ_1       fe ILLe       0010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~3u]                   40004033 sloppy xor     
 * 8f IJT_1      bb SH_2       0010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * 90 SW_2       ab EBREAK_2   0010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * 91 aF_SW      ee eILL0a     0010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * 92 eILL0b     ab EBREAK_2   0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 93 MRET_8     9f SH_5       0010000000000000101011101100100110        Prep +4                                           00000000 
 * 94 condb_4    ab EBREAK_2   0010000000000000110011101101001xx0        Branch on condition                               00000000 
 * 95 ANDI_1     2b SLTIX_1    0000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * 96 eILL0a     45 WFI_3      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 97 WFI_5      ef WFI_5      0100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * 98 BLT        8b LB_6       0000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 MUL_1      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004067 close to jalr
 * 9a eILL0b     ab EBREAK_2   0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 9b MRET_8        (use dinx) 0010000000000000101011101100100110        Prep +4                                           00000000 
 * 9c DIV_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d XORI_1     fe ILLe       0000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   00000000 
 * 9e OR_1       f4 Fetch2     0000000000001000111011101000000xx0        RS1^0xffffffff to jj                              00000000 
 * 9f SW_E3      90 NMI_2      0010000000000000101111001100100110        Q = 3                                             00000000 
 * a0 LHU_0      30 SLTIX_2    0100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 IJT_4      db jFault_1   0100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * a2 DIV_e      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 XOR_1      fe ILLe       0010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                0000500f close to fence
 * a4 SRxI_0     b1 aF_SW_3    0010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 QINT_1     bf IJT_1      0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * a6 _LMULHU_1  1e aFault_1   0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * a7 SLTX_1     cb QINT_2     0010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * a8 DIV_E      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005023 close to store
 * a9 _LCSRRCI_1 ab EBREAK_2   0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * aa DIV_D      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab JAL_3      2e _LMULHU_1  0100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * ac _L0xac     b5 SH_3       0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     b5 SH_3       0010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af SLLI_1     89 _LDIV_F    0000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * b0 ECALL_2    d7 ECALL_3    0000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * b1 SRxI_1     ee eILL0a     0000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * b2 SRxI_2     6e _LDIV_C    0000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                00000000 
 * b3 ECALL_4       (use dinx) 0010000000000000101011001100100110        Q = 4                                             00000000 
 * b4 SLL_1         (use dinx) 0010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * b5 SRx_1      f2 SW_2       0010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * b6 ILL_1      2e _LMULHU_1  0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * b7 MRET_3     85 LBU_1      0010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * b8 BGE        8b LB_6       0000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 MUL_3      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba ILL_2      95 SW_E3      0000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * bb ILL_4      3f SRx_1      0000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * bc CSRRWI_0   5e LHU_1      0000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd CSRRW_2    6e _LDIV_C    0000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * be LH_4       09 LB_5       0010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * bf MRET_4     49 CSRRW_1    0010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * c0 DIVU_5     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 MRET_7     5d SB_2       0010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * c2 DIVU_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 MULH_3     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      e1 ORI_1      0000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 eFetch2    72 LBU_3      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  Fr00  Not in use                                        00000000 
 * c6 LH_5       ba LHU_3      0010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * c7 SB_1       53 LDAF_LH    0000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * c8 _L0x99     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00006023 close to store
 * c9 LDAF_a     b7 IJ_3       0010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * ca DIVU_4     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb EBRKWFI2   32 JAL_1      0000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         00000000 
 * cc OR_0       9e SH_4       0010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce WFI_4      fe ILLe       0010000000000000001011x01001xxxxx0        Prepare read PC                                   40006033 sloppy or      
 * cf _LDIV_13   9b ILL_5      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * d0 SB_4       b0 CSRRW_3    1110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * d1 _LDIV_C    4b CSRRW_2    0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * d2 LBU_3      65 WFI_4      0010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * d3 CSRRW_3    3a SRxI_1     0010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * d4 BAERR_1    ee eILL0a     0000000000001111110011101000001xx0        Faultadr to mtval. Prepare get offset             00000000 
 * d5 BAERR_2       (use dinx) 0010000000000000001011101100000xx0        ~offset to Q. Prep read (origPC+offset)           00000000 
 * d6 SB_5       fe ILLe       0000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * d7 CSRRW_4    b3 CSRRWI_1   0100000010001010110111000100100110        IncPC, OpFetch, but force +4                      00000000 
 * d8 BLTU       8b LB_6       0000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 MUL_2      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da BAERR_4    7e NMI_1      0000110000001110100111100x00001xx0        Store 0 to mcause. Prep get trap entry pont       00000000 
 * db ECALL_5    ee eILL0a     0010000000000000101011001100100110        Q = 8                                             00000000 
 * dc CSRRSI_0   5e LHU_1      0000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd NMI_1      f7 EBREAK_1   0000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * de JALRE2     74 BrOpFet    0000000000001111101011100x00001xx0        mtval is target                                   00000000 
 * df aFault_2   74 BrOpFet    0000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * e0 DIV_10     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 ORI_1      01 LB_1       0010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * e2 DIV_7      fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 DIVU_1     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     95 SW_E3      0010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 _LMULHU_5  3d SRxI_2     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * e6 JAERR_2    6e _LDIV_C    0000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * e7 LBU_1      3a SRxI_1     0010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * e8 DIV_14     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 LH_3       a1 ECALL_4    0010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * ea _LDIV_F    fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007023 close to store
 * eb _LCSRRS_1  be IJ_1       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * ec AND_0      7d BAERR_4    0010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee LDAF_3     fe ILLe       0000000000001101100111100x00001xx0        PC to mepc                                        40007033 sloppy and     
 * ef SW_E2      6e _LDIV_C    0000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * f0 ILL_5      d2 LB_2       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * f1 _LDIV_11   3a SRxI_1     0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f2 SH_4       32 JAL_1      1110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * f3 jFault_1   57 LH_5       0000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * f4 SH_5          (use dinx) 0000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * f5 _LDIV_15   f3 aF_SW      0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f6 EBREAK_2   fb SB_3       0000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * f7 aF_SW_2    f6 WFI_1      0010000000000000101011001100100110        Q = 4                                             00000000 
 * f8 BGEU       8b LB_6       0000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_2     fe ILLe       0010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa CSRRWI_1   5a SB_1       xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * fb WFI_2      d0 ECALL_1    0010000000000000101011101100100110        Check offset                                      00000000 
 * fc CSRRCI_0   5e LHU_1      0000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      dd aF_SW_1    0010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       b6 ECALL_5    0010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     a5 MRET_3     0010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 
 *   8  29  50 1201 Can not simplify, no legal mapping
 *   7  29 725 526 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   6  25 729 526 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   5  29 745 506 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   4  25 853 402 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   3  25 648 607 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   2  29 800 451 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   1  29 891 360 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   0  29 465 786 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 */
localparam u0_0 = 256'h30e6001030e608041886205a008b205a18091007000420e600e620be09d22001;
localparam u0_1 = 256'h30b726d438e630a6303218e620413013207436de4816261500140000001a008b;
localparam u0_2 = 256'h30e600fe30e6003e2630209600212096201d00270004303500e600fe00e62052;
localparam u0_3 = 256'h083a0835090330493032093d00fe301348d72803083608de20812086002b32e6;
localparam u0_4 = 256'h26e600fe00fe003108b02066264b2066088f08472665102b00fe00fe260b2050;
localparam u0_5 = 256'h30da097028fb30493032085d00fe00fe008b1857301e09eb30da095430da08e6;
localparam u0_6 = 256'h26cf00fe00fe0031087a00fe00fe00fe309308f240ef102b00fe00fe50f700fe;
localparam u0_7 = 256'h087d089008343049303208f200fe00fe267d0077007388f40876101a301e09ba;
localparam u0_8 = 256'h26a900fe00fe002926e600fe00fe00fe087f263409f0102100fe00fe087d2085;
localparam u0_9 = 256'h08f2089f00fe00fe0000203400fe3013309308bb269428340895083426923034;
localparam u0_A = 256'h26c5003f00fe003f089a00fe263400fe206130d026af303a00fe00fe26b6205e;
localparam u0_B = 256'h08c1081f18de304928b5101a00fe301320bd269a309e0000000026de209226b2;
localparam u0_C = 256'h404f00fe00fe002630e600fe20a500fe08cb1847106f10e100fe00fe30e900fe;
localparam u0_D = 256'hb0f4b0f430e530492692009100fe301330a100fe00002692301e090630c92637;
localparam u0_E = 256'h26de00fe00fe0011105600fe20c600fe301e26de26b1101a00fe00fe081d00fe;
localparam u0_F = 256'h00c70046007e3049306b264500fe301330ab26fa30db200000dd00e6301e0972;
localparam u1_0 = 256'h10ba03b210ba03bbb0ba23ab017b23ab017b01bb00b110ba00b2837b02fb036b;
localparam u1_1 = 256'h32ba02b310ba82f980b910ba22ba33baab7b2b71033b00bb03fb000003bb03fb;
localparam u1_2 = 256'h10ba003010ba03b0003aa3ab03bba3ab003b23ba00b103c800b2003010bab36b;
localparam u1_3 = 256'h03c803c8129b31ba80b9129b003033ba343a12db12db2b793cb830ba03fb10ba;
localparam u1_4 = 256'h02bb0030003003b20eb983bb003b83bb3eba36b802bb03fb00300030003b837b;
localparam u1_5 = 256'h3eb902fb32db31ba80b932db00300030023b023b3eba029b3eb902fb3eb912fa;
localparam u1_6 = 256'h003b0030003003b20b3b0030003000303cb80fb900b203fb0030003021ba0030;
localparam u1_7 = 256'h3eb8343a3a7831ba80b90b390030003036b800bb00b002fa3f3a01bb3eba029b;
localparam u1_8 = 256'h02bb0030003003f210ba0030003000303738133002fb03fb0030003036b8036b;
localparam u1_9 = 256'h0739073b0030003000003a70003033ba3cb832db02f33a7836fa367838b03d3a;
localparam u1_A = 256'h003b03b0003003b036ba00303a780030003b82f901bb03c80030003002b3b36b;
localparam u1_B = 256'h02fb02fb2b7931ba32db01fb003033ba033302b3003a000000002b7138b002b3;
localparam u1_C = 256'h01b20030003003f23d3a003001b30030343a377b003b23fa0030003032ba0030;
localparam u1_D = 256'h22fa20fa3eba31ba38b802b2003033ba3eba0030000038b83eba029b21ba00bb;
localparam u1_E = 256'h2b710030003003f201fb0030033300303eba2b7102b303fb00300030003b0030;
localparam u1_F = 256'h00b200b000b231ba003a02bb003033ba3cba00333eba6fff003100b23eba029b;
localparam u2_0 = 256'h00000080000000800001040000800400008000800080040000800490008a0580;
localparam u2_1 = 256'h00000c8000000080008100000400000005010102008004800080000000800080;
localparam u2_2 = 256'h0000008000000080048004000080040004800000008000800080008000000500;
localparam u2_3 = 256'h0080008000040000008100000080000000000004000001020400040000800000;
localparam u2_4 = 256'h0480008000800080002007810480078100000000048000800080008004800581;
localparam u2_5 = 256'h0000008a00040000008100000080008000800080000000840000008a00000042;
localparam u2_6 = 256'h0480008000800080038000800080008000000000008000800080008000000080;
localparam u2_7 = 256'h0000000000300000008100000080008004000080008000ca0000008000000084;
localparam u2_8 = 256'h00800080008000800c0000800080008000002c00008a00800080008000000580;
localparam u2_9 = 256'h00000380008000800000043000800000000000000c800030000000000c300030;
localparam u2_A = 256'h048000800080008000000080043000800480008104800080008000800c800500;
localparam u2_B = 256'h0082008201020000000400800080000004800c800080000000000d0204300c80;
localparam u2_C = 256'h0080008000800080003000800480008000000100008000000080008000000080;
localparam u2_D = 256'h004a000000000000040000800080000000000080000004300000008400000480;
localparam u2_E = 256'h0d02008000800080008000800480008000000d020c8000800080008000800080;
localparam u2_F = 256'h0080008000800000008004800080000000000c80000004000080008000000084;
