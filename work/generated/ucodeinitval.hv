/* -----------------------------------------------------------------------------
 * Part of midgetv
 * 2019. Copyright B. Nossum.
 * For licence, see LICENCE
 * -----------------------------------------------------------------------------
 * Automaticaly generated by ../bin/midgetv_genucode (based on ../code/ucode.h).
 * Do not edit.
 *                             Microcode instruction
 * uPC           next uPC      444333333333322222222221111111111
 * || label      || next label 21098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ----------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       01 LB_1       00110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 LB_1       d2 LB_2       00010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * 02 IJ_0       be IJ_1       00010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~1u]. inCSR=0               0000000b ij       
 * 03 _L0x03     e6 StdIncPc   00010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     e6 StdIncPc   00000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     00010000000000000000011x00100xxxxx0 AUIPC  q = imm20+2 or imm20+4  (copy x/2)                00000017 auipc   
 * 06 LB_3       07 LB_4       00010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * 07 LB_4       09 LB_5       00010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * 08 _L0x08     5a SB_1       00000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 LB_5       8b LB_6       00010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * 0a _L0x0a     5a SB_1       00000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b JALR_2     86 JAL_2      00000000000001100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * 0c ADD_0      04 ADDI_0     00010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     e6 StdIncPc   00000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      10 SUB_1      00010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     e6 StdIncPc   00000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 SUB_1      8b LB_6       00010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * 11 AND_1      1a ANDI_1     00010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * 12 LASTINCH      (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        not in use                                        00000000 
 * 13 condb_2    14 condb_3    00010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * 14 condb_3    15 condb_4    00010000000000000110011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 15 condb_4    16 condb_5    00010000000000000000011101101001xx0        Branch on condition                               00000000 
 * 16 condb_5    e6 StdIncPc   00010000000000000001011x01000xxxxx0        Branch not taken.                                 00000000 
 * 17 condb_5t   de Fetch      00100000010001010110111100100100000        Branch taken.                                     00000000 
 * 18 BEQ        13 condb_2    00000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     41 JALR_1     00000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a ANDI_1     e6 StdIncPc   00000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * 1b _L0x1b     32 JAL_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000006f jal     
 * 1c ECAL_BRK   a6 ECAL_RET   00010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d ORI_2      e6 StdIncPc   00000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 1e aFault_1   d4 aFault_2   00010000000000000101011001100100110        Q = 4                                             00000000 
 * 1f IJ_2       b7 IJ_3       00000000000001100101011101000110000        Read word is to be masked with lsb = 0            00000000 
 * 20 LH_0       52 LH_1       00100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 XORI_1     e6 StdIncPc   00000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   00000000 
 * 22 MULHU_6    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     e6 StdIncPc   00010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     35 SLLI_1     00010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     00010000000000000000011x00100xxxxx0 AUIPC  q = imm20+2 or imm20+4  (copy x/2)                00001017 auipc   
 * 26 OR_1       27 OR_2       00000000000001000111011101000000xx0        RS1^0xffffffff to jj                              00000000 
 * 27 OR_2       1d ORI_2      00010000000000000000011101100100000        Q = rs2                                           00000000 
 * 28 _L0x28     96 SH_1       00000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 XOR_1      21 XORI_1     00010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                00000000 
 * 2a _L0x2a     96 SH_1       00000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b SLTIX_1    30 SLTIX_2    00010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             00000000 
 * 2c SLL_0      3e SLL_1      00010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     e6 StdIncPc   00000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e _LMULHU_1  fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40001033 sloppy sll     
 * 2f _L0x2f     e6 StdIncPc   00000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 SLTIX_2    e6 StdIncPc   00000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 31 SLTX_1     2b SLTIX_1    00010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * 32 JAL_1      86 JAL_2      00000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 33 JAERR_1       (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 34 JAL_3      de Fetch      00100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * 35 SLLI_1     36 SLLI_2     00000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * 36 SLLI_2     03 _L0x03     00000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 37 ECALL_2    d7 ECALL_3    00000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * 38 BNE        13 condb_2    00000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a SRxI_1     3d SRxI_2     00000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * 3b _L0x3b     32 JAL_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000106f jal     
 * 3c CSRRW_0    49 CSRRW_1    00000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d SRxI_2     03 _L0x03     00000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                00000000 
 * 3e SLL_1      35 SLLI_1     00010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * 3f SRx_1      3a SRxI_1     00010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * 40 LW_0       50 LW_1       00110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 JALR_1     0b JALR_2     00010000000000000000011101100100110        Q=1                                               00000000 
 * 42 MULHU_2    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 MULHU_4    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     2b SLTIX_1    00010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 WFI_3      65 WFI_4      00010000000000000101011101100100110        More check offset                                 00000000 
 * 46 ILL_1      47 ILL_2      00000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * 47 ILL_2      8f ILL_3      00000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * 48 _L0x48     66 SW_1       01110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 CSRRW_1    4b CSRRW_2    00010000000000000000011101100100110        Construct PC storage adr                          00000000 
 * 4a _L0x4a     66 SW_1       01110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b CSRRW_2    b0 CSRRW_3    00000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * 4c SLT_0      31 SLTX_1     00010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e eILL0b     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40002033 sloppy slt     
 * 4f MRET_8     e6 StdIncPc   00010000000000000101011101100100110        Prep +4                                           00000000 
 * 50 LW_1       e6 StdIncPc   00001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 51 LDAF_LW    da LDAF_a     00000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 52 LH_1       54 LH_2       00010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 53 LDAF_LH    da LDAF_a     00000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 54 LH_2       eb LH_3       00010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 55 aFaultb    1e aFault_1   00000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 56 LH_4       57 LH_5       00010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * 57 LH_5       8b LB_6       00010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * 58 DIV_A      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_B      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a SB_1       5d SB_2       00000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * 5b _L0x5b     32 JAL_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000206f jal     
 * 5c CSRRS_0    49 CSRRW_1    00000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d SB_2       fb SB_3       00000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 5e LHU_1      70 LHU_2      00010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 5f LDAF_LHU   da LDAF_a     00000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 60 MULHU_3    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 EBRKWFI2   f7 EBREAK_1   00000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         00000000 
 * 62 DIV_8      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 DIV_9      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    2b SLTIX_1    00010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 WFI_4      ef WFI_5      00010000000000000001011x01001xxxxx0        Prepare read PC                                   00000000 
 * 66 SW_1       f2 SW_2       00000000000000011111011100100001xx0        Write d to a+k until accepted                     00000000 
 * 67 SW_E1SWE   93 SW_E2      00000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 68 DIV_12     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 _LDIV_13   fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 6a MULH_1     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b SB_4       7a SB_5       01110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * 6c SLTU_0     31 SLTX_1     00010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e _LDIV_C    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40003033 sloppy sltu    
 * 6f MRET_6     cf MRET_7     00010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 70 LHU_2      ba LHU_3      00010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 71 aFaultc    1e aFault_1   00000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * 72 LBU_3      1a ANDI_1     00010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * 73 BAERR_1       (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       not used                                           00000000 
 * 74 oleduck       (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  why oleduck                                             00000000 
 * 75 doleduck      (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  why doleduck                                            00000000 
 * 76 Fetchu     f4 Fetch2     00010000000000000001111101010110000  Fr00u Read and latch instruction                        00000000 
 * 77 eFetchu    f4 Fetch2     00011001010000000101111101010110000  Fr00u rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * 78 DIV_4      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 DIV_5      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a SB_5       f2 SW_2       00000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * 7b _L0x7b     32 JAL_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000306f jal     
 * 7c CSRRC_0    49 CSRRW_1    00000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d BAERR_4       (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       not used                                           00000000 
 * 7e NMI_1      90 NMI_2      00000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * 7f JALRE2        (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 80 LBU_0      85 LBU_1      00110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 JAERR_2       (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 82 DIV_1      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 DIV_2      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     21 XORI_1     00010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 LBU_1      f0 LBU_2      00010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 86 JAL_2      34 JAL_3      10000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 87 JALRE1        (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 88 DIV_E      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 _LDIV_F    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 8a DIVU_5     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b LB_6       e6 StdIncPc   00000000000000100001011101000100110        WTRG=(D^0x80)+0xFFFFFF7F+1=(D^0x80)-0x80          00000000 
 * 8c XOR_0      29 XOR_1      00010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e _LCSRRS_1  fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40004033 sloppy xor     
 * 8f ILL_3      a9 ILL_4      00010000000000000101011101100100110        Q = 1                                             00000000 
 * 90 NMI_2      34 JAL_3      00000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 91 LDAF_2     92 LDAF_3     00000110000001110001011000x00100110        Store 4 to mcause                                 00000000 
 * 92 LDAF_3     34 JAL_3      00000000000001101100111100x00001xx0        PC to mepc                                        00000000 
 * 93 SW_E2      95 SW_E3      00000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * 94 SW_E4      34 JAL_3      00000110000001110100111100x00101000        Store 6 to mcause                                 00000000 
 * 95 SW_E3      94 SW_E4      00010000000000000101111001100100110        Q = 3                                             00000000 
 * 96 SH_1       bb SH_2       00000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * 97 SW_E1SWH   93 SW_E2      00000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 98 BLT        13 condb_2    00000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 _L0x99     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00004067 close to jalr
 * 9a ECALL_6    34 JAL_3      00000110000001110100111000x00100000        mcause = 11                                       00000000 
 * 9b ILL_5         (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 9c DIV_10     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d _LDIV_11   fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 9e SH_4       9f SH_5       01110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * 9f SH_5       f2 SW_2       00000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * a0 LHU_0      5e LHU_1      00100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 ECALL_4    b6 ECALL_5    00010000000000000101011001100100110        Q = 4                                             00000000 
 * a2 DIV_14     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 _LDIV_15   fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 0000500f close to fence
 * a4 SRxI_0     3a SRxI_1     00010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 MRET_3     af MRET_4     00010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * a6 ECAL_RET   d0 ECALL_1    00010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * a7 EBRKWFI1   61 EBRKWFI2   00010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * a8 DIV_3      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005023 close to store
 * a9 ILL_4      34 JAL_3      00000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * aa DIV_6      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab EBREAK_2   9a ECALL_6    00000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * ac _L0xac     3f SRx_1      00010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     3f SRx_1      00010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af MRET_4     c5 MRET_5     00010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * b0 CSRRW_3    b2 CSRRW_4    00010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * b1 aF_SW_3    92 LDAF_3     00000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * b2 CSRRW_4    de Fetch      00100000010001010110111000100100110        IncPC, OpFetch, but force +4                      00000000 
 * b3 CSRRWI_1      (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * b4 straddle   76 Fetchu     10100000010001010110111000100100110  Fr00u IncPC, OpFetch                                    00000000 
 * b5 SH_3       9e SH_4       00010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * b6 ECALL_5    9a ECALL_6    00010000000000000101011001100100110        Q = 8                                             00000000 
 * b7 IJ_3       bd IJ_4       00010000000000000110011101100100110        Construct Q = 1                                   00000000 
 * b8 BGE        13 condb_2    00000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 DIV_e      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba LHU_3      1a ANDI_1     00010000000000000011111101100010xx0        Invert q. Prepare read mask                       00000000 
 * bb SH_2       b5 SH_3       00000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * bc CSRRWI_0   49 CSRRW_1    00000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd IJ_4       de Fetch      00100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * be IJ_1       1f IJ_2       00010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~1u]                   00000000 
 * bf IJT_1      c1 IJT_2      00010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * c0 DIV_D      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 IJT_2      e9 IJT_3      00000000000001100101011101000110000        Read word is to be masked with ~1u                00000000 
 * c2 DIVU_3     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 DIVU_4     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      e1 ORI_1      00000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 MRET_5     6f MRET_6     00010000000000000000011101100010xx0        ~302                                              00000000 
 * c6 IJT_4      47 ILL_2      00100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * c7 QINT_1     cb QINT_2     00000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * c8 DIV_7      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006023 close to store
 * c9 MRET_2     a5 MRET_3     00010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * ca DIVU_2     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb QINT_2     e6 StdIncPc   00000110000001111010011101000110000        mtval = 0.                                        00000000 
 * cc OR_0       26 OR_1       00010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce _LCSRRCI_1 fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40006033 sloppy or      
 * cf MRET_7     4f MRET_8     00010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * d0 ECALL_1    37 ECALL_2    00010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 00000000 
 * d1 MRET_1     c9 MRET_2     00000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * d2 LB_2       06 LB_3       00010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     00000000 
 * d3 aFaultd    1e aFault_1   00000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * d4 aFault_2   92 LDAF_3     00000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * d5 unalignd   b4 straddle   00010000000000000001011101000110000  Fr00u Unaligned pc, prep read high hword                00000000 
 * d6 eILL0c     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * d7 ECALL_3    a1 ECALL_4    00000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * d8 BLTU       13 condb_2    00000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 MULH_3     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da LDAF_a     91 LDAF_2     00010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * db jFault_1   92 LDAF_3     00000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * dc CSRRSI_0   49 CSRRW_1    00000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd aF_SW_1    e5 aF_SW_2    00000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * de Fetch      f4 Fetch2     00000000000001000001111101010110000  Fr00  Read and latch instruction                        00000000 
 * df eFetch     f4 Fetch2     00001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * e0 DIVU_1     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 ORI_1      1d ORI_2      00010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * e2 MUL_1      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 MUL_3      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     1a ANDI_1     00010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 aF_SW_2    b1 aF_SW_3    00010000000000000101011001100100110        Q = 4                                             00000000 
 * e6 StdIncPc   de Fetch      10100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    00000000 
 * e7 aFault     1e aFault_1   00000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * e8 MUL_2      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 IJT_3      c6 IJT_4      00010000000000000110011101100100110        Construct Q = 1                                   00000000 
 * ea _LMULHU_5  fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007023 close to store
 * eb LH_3       56 LH_4       00010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * ec AND_0      11 AND_1      00010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee eILL0a     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007033 sloppy and     
 * ef WFI_5      de Fetch      00100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * f0 LBU_2      72 LBU_3      00010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * f1 aFaulte    1e aFault_1   00000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * f2 SW_2       e6 StdIncPc   00010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * f3 aF_SW      dd aF_SW_1    00010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * f4 Fetch2     d5 unalignd   0000000000xx11011111111111100100000  Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned     00000000 
 * f5 jFault     db jFault_1   00000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * f6 WFI_1      fa WFI_2      00010000000000000000011001100100110 WFI    To check offset                                   00000000 
 * f7 EBREAK_1   ab EBREAK_2   00000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * f8 BGEU       13 condb_2    00000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_2     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa WFI_2      45 WFI_3      00010000000000000101011101100100110        Check offset                                      00000000 
 * fb SB_3       6b SB_4       00010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * fc CSRRCI_0   49 CSRRW_1    00000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      7e NMI_1      00010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       46 ILL_1      00010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     c7 QINT_1     00010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 
 */
/* Col   x   1   0
 *  42   0   3 253 Can not simplify, can't possibly represent between 3 and 3 high values with only 4 bits index
 *  41  11   4 241 Can not simplify, can't possibly represent between 4 and 15 high values with only 4 bits index
 *  40  11  17 228 Can not simplify, can't possibly represent between 17 and 28 high values with only 4 bits index
 *  39  11 152  93 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  38  11   3 242 Can not simplify, can't possibly represent between 3 and 14 high values with only 4 bits index
 *  37  11   9 236 Can not simplify, no legal mapping
 *  36  11   9 236 Can not simplify, no legal mapping
 *  35  11   6 239 Can not simplify, no legal mapping
 *  34  11   8 237 Can not simplify, no legal mapping
 *  33  11  16 229 Can not simplify, no legal mapping
 *  32  12   4 240 Can not simplify, no legal mapping
 *  31  12  10 234 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  30  11   1 244 Can not simplify, can't possibly represent between 1 and 12 high values with only 4 bits index
 *  29  11  73 172 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  28  11  70 175 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  27  11  36 209 Can not simplify, can't possibly represent between 36 and 47 high values with only 4 bits index
 *  26  11  30 215 Can not simplify, no legal mapping
 *  25  71 120  65 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  24  71  80 105 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  23  71 138  47 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  22  71  59 126 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  21  11 229  16 Can not simplify, can't represent fixed locations with any less than 5 bits of the index
 *  20  11 233  12 Can not simplify, can't represent fixed locations with any less than 7 bits of the index
 *  19  85 155  16 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  18  11   1 244 Can not simplify, can't possibly represent between 1 and 12 high values with only 4 bits index
 *  17  11 150  95 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  16  83 101  72 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  15  11   4 241 Can not simplify, can't possibly represent between 4 and 15 high values with only 4 bits index
 *  14  11   5 240 Can not simplify, no legal mapping
 *  13  85 109  62 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  12  85  69 102 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  11  85  47 124 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *  10 147  31  78 
 * Candidate function 8040, used ffff, inputs 93
 *                             Microcode instruction
 * uPC           next uPC      444333333333322222222221111111111
 * || label      || next label 21098765432109876543210987654321098 Purpose                                                  Simulated entrypoint
 * -- ---------- -- ---------- ----------------------------------- -------------------------------------------------------- -----------
 * 00 LB_0       5f LDAF_LHU   00110000000000000110110101100100000 LB     Load byte. q = rdadr=RS1+0fs                      00000003 lb      
 * 01 ORI_2      6e _LDIV_C    00000000000000100001011101000111000        rd = Iimm | RS1                                   00000000 
 * 02 IJ_0       90 NMI_2      00010010000100000110111101100100000 IJ     Jump to mem[(rs1+ofs)&~1u]. inCSR=0               0000000b ij       
 * 03 _L0x03     1e aFault_1   00010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000000f fence   
 * 04 ADDI_0     1e aFault_1   00000000000000100001011101000100000 ADDI   Add immediate. rd =RS1+Iimm (or joined)           00000013 addi    
 * 05 _L0x05     04 ADDI_0     00010000000000000000011x00100xxxxx0 AUIPC  q = imm20+2 or imm20+4  (copy x/2)                00000017 auipc   
 * 06 condb_5    65 WFI_4      00010000000000000001011x01000xxxxx0        Branch not taken.                                 00000000 
 * 07 condb_5t   69 _LDIV_13   00100000010001010110111100100100000        Branch taken.                                     00000000 
 * 08 _L0x08     cb QINT_2     00000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    00000023 sb      
 * 09 IJ_2       ffffffff (null)     00000000000001100101011101000110000        Read word is to be masked with lsb = 0            00000000 
 * 0a _L0x0a     cb QINT_2     00000000000001000111010101100100000 SB     Store byte. wjj=wradr=RS1+Simm                    40000023 sb      
 * 0b OR_2       12 LASTINCH   00010000000000000000011101100100000        Q = rs2                                           00000000 
 * 0c ADD_0      04 ADDI_0     00010000000000000111011101100001xx0 ADD    add     Addition Q = RS1                          00000033 add 
 * 0d _L0x0d     1e aFault_1   00000000000000100001011101000110000 LUI    q = imm20                                         00000037 lui     
 * 0e SUB_0      73 BAERR_1    00010000000000000111011x01000xxxxx0 SUB    Subtraction                                       40000033 sub 
 * 0f _L0x0f     1e aFault_1   00000000000000100001011101000110000 LUI    q = imm20                                         40000037 lui     
 * 10 JAL_1      ffffffff (null)     00000000000001100001011101000100000        Target adr to yy                                  00000000 
 * 11 JAERR_1    9d _LDIV_11   0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 12 JAL_2         (use dinx) 10000000000000100110011000x00100110        Return address to TRG                             00000000 
 * 13 JALRE1     1a ANDI_1     0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 14 LW_1       8b LB_6       00001000010000100101111101000001xx0        Read until d=mem[(rs1+ofs) & ~3u]                 00000000 
 * 15 LDAF_LW    06 LB_3       00000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 16 ECALL_1    1e aFault_1   00010000000000000001011101100100110 ECALL  Verify Imm==0x000                                 00000000 
 * 17 MRET_1     74 oleduck    00000000000001000011011101000110000 MRET   First save Imm, start build constant for check    00000000 
 * 18 BEQ        7f JALRE2     00000000000001100111011101000110000 BEQ    Conditional Branch. Offset to Ryy                 00000063 beq     
 * 19 JALR_0     3e SLL_1      00000000000001000101011101000100000 JALR   jj=RS1+imm                                        00000067 jalr    
 * 1a condb_3    1e aFault_1   00010000000000000110011101100100110        Calculate RS1+~RS2+1                              00000000 
 * 1b _L0x1b     10 SUB_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000006f jal     
 * 1c ECAL_BRK   66 SW_1       00010000000100000101111100100110000 ECALL/EBREAK  Select ECALL/(U/S/M)RET or EBREAK/WFI      00000073 ecall/ebreak/mret/wfi
 * 1d SLTIX_2    1e aFault_1   00000000000000100001011101000110010        Registered ALU flag to rd                         00000000 
 * 1e StdIncPc   db jFault_1   10100000010001010110111000100100110  Fr00  IncPC, OpFetch                                    00000000 
 * 1f aFault     d7 ECALL_3    00000000000001111101011101000110000  err   Load access fault. Faulting adr to mtval          00000000 
 * 20 LH_0       26 OR_1       00100000000101100110110101100100000 LH     Load hword. Q = rdadr=RS1+Iimm.                   00001003 lh      
 * 21 SLLI_2     1e aFault_1   00000000100000100101101101100101000        Repeat Q = Q+Q until shregcnt == 0                00000000 
 * 22 MULHU_6    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000100b close to ij
 * 23 _L0x23     1e aFault_1   00010000000000000001011x01000xxxxx0 FENCE  Prepare read PC (FENCE/FENCE.I)                   0000100f fence.i 
 * 24 SLLI_0     b0 CSRRW_3    00010000000000000111100100x00110000 SLLI   Shift left immediate.                             00001013 slli    
 * 25 _L0x25     04 ADDI_0     00010000000000000000011x00100xxxxx0 AUIPC  q = imm20+2 or imm20+4  (copy x/2)                00001017 auipc   
 * 26 LH_1       0b JALR_2     00010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 27 LDAF_LH    01 LB_1       00000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 28 _L0x28     54 LH_2       00000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                00001023 sh      
 * 29 SB_2       9e SH_4       00000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8,16 or 24 times)   00000000 
 * 2a _L0x2a     54 LH_2       00000000000101000111010101100100000 SH     Store halfword. jjw=wradr=RS1+Simm                40001023 sh      
 * 2b NMI_2      1d ORI_2      00000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 2c SLL_0      b5 SH_3       00010000000000000111011x00x00xxxxx0 SLL    Shift left                                        00001033 sll     
 * 2d _L0x2d     1e aFault_1   00000000000000100001011101000110000 LUI    q = imm20                                         00001037 lui     
 * 2e SW_E4      fe ILLe       00000110000001110100111100x00101000        Store 6 to mcause                                 40001033 sloppy sll     
 * 2f _L0x2f     1e aFault_1   00000000000000100001011101000110000 LUI    q = imm20                                         40001037 lui     
 * 30 LH_2       1e aFault_1   00010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 31 aFaultb    3a SRxI_1     00000000000001111101011101000110000  err   LH Load access fault. Faulting adr to mtval       00000000 
 * 32 WFI_1      12 LASTINCH   00010000000000000000011001100100110 WFI    To check offset                                   00000000 
 * 33 EBREAK_1      (use dinx) 00000000000001111001011101000110000 EBREAK mepc = pc, store 0 to mtval                       00000000 
 * 34 LHU_1      74 oleduck    00010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * 35 LDAF_LHU   21 XORI_1     00000000000001111101011100100110000  err   LD AlignFault. Faulting adr to mtval              00000000 
 * 36 aFault_1   03 _L0x03     00010000000000000101011001100100110        Q = 4                                             00000000 
 * 37 ECALL_6    71 aFaultc    00000110000001110100111000x00100000        mcause = 11                                       00000000 
 * 38 BNE        7f JALRE2     00000000000001100111011101000110000 BNE    Conditional Branch. Offset to Ryy                 00001063 bne     
 * 39 MULHU_7    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00001067 close to jalr
 * 3a SLTIX_1    b4 straddle   00010000000000000xxxx11101000100110        RS1 - imm / RS1 - RS2                             00000000 
 * 3b _L0x3b     10 SUB_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000106f jal     
 * 3c CSRRW_0    56 LH_4       00000000000001100011011101000110000 CSRRW  Decoded CSR adr in yy                             00001073 csrrw
 * 3d aF_SW_3    03 _L0x03     00000110000001110001011000x00100000        Store 7 to mcause                                 00000000 
 * 3e JALR_1     b0 CSRRW_3    00010000000000000000011101100100110        Q=1                                               00000000 
 * 3f SH_3       b2 CSRRW_4    00010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 40 LW_0       14 condb_3    00110000001100000110111101100100000 LW     Load word. Q=yy=rdadr=RS1+Iimm                    00002003 lw      
 * 41 SH_2       6b SB_4       00000000100001100101101101100101000        Repeat shl until shreg = 0 (0,8 or 24 times)      00000000 
 * 42 MULHU_2    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200b close to ij
 * 43 MULHU_4    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000200f close to fence
 * 44 SLTI_0     3a SRxI_1     00010000000000000111111101100010xx0 SLTI   Set less than immediate (signed)                  00002013 slti    
 * 45 IJT_2      cf MRET_7     00000000000001100101011101000110000        Read word is to be masked with ~1u                00000000 
 * 46 SW_1       bd IJ_4       00000000000000011111011100100001xx0        Write d to a+k until accepted                     00000000 
 * 47 SW_E1SWE   5e LHU_1      00000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 48 _L0x48     46 ILL_1      01110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      00002023 sw      
 * 49 MRET_2     be IJ_1       00010000000000000011011001100100000        0xff+3 = 0x102                                    00000000 
 * 4a _L0x4a     46 ILL_1      01110000001100000111011101100100000 SW     Store word. Q=wradr=RS1+Simm                      40002023 sw      
 * 4b QINT_2     b7 IJ_3       00000110000001111010011101000110000        mtval = 0.                                        00000000 
 * 4c SLT_0      ab EBREAK_2   00010000000000000111011x01000xxxxx0 SLT    Set less than (signed)                            00002033 slt     
 * 4d MULHSU_0   fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 4e LHU_2      fe ILLe       00010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     40002033 sloppy slt     
 * 4f aFaultc    1e aFault_1   00000000000001111101011101000110000  err   LHU Load access fault. Faulting adr to mtval      00000000 
 * 50 Fetchu     1e aFault_1   00010000000000000001111101010110000  Fr00u Read and latch instruction                        00000000 
 * 51 eFetchu    c9 MRET_2     00011001010000000101111101010110000  Fr00u rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * 52 WFI_3      30 SLTIX_2    00010000000000000101011101100100110        More check offset                                 00000000 
 * 53 unalignd   c9 MRET_2     00010000000000000001011101000110000  Fr00u Unaligned pc, prep read high hword                00000000 
 * 54 SH_1       e9 IJT_3      00000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * 55 SW_E1SWH   36 SLLI_2     00000000000001111001011100x00110000        Store faulting address alignment to mtval         00000000 
 * 56 CSRRW_1    c7 QINT_1     00010000000000000000011101100100110        Construct PC storage adr                          00000000 
 * 57 aF_SW_1    ffffffff (null)     00000000000001111101011101000110000  err   SW Store access fault. Faulting adr to mtval      00000000 
 * 58 DIV_A      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002063 close to branch
 * 59 DIV_B      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00002067 close to jalr
 * 5a MRET_6     29 XOR_1      00010000000000000xxxx11101100100110        ~302 + origImm + 1 for branch decision            00000000 
 * 5b _L0x5b     10 SUB_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000206f jal     
 * 5c CSRRS_0    56 LH_4       00000000000001100011011101000110000 CSRRS  Decoded CSR adr in yy                             00002073 csrrs
 * 5d SB_3       5d SB_2       00010000000000000000011101000110000        Prepare get back address to use                   00000000 
 * 5e ILL_3      4e eILL0b     00010000000000000101011101100100110        Q = 1                                             00000000 
 * 5f LB_1       c9 MRET_2     00010001010000000101111101100001xx1        Read until q=mem[rs1+ofs) & ~3u]                  00000000 
 * 60 MULHU_3    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003003 close to load
 * 61 LB_3       33 JAERR_1    00010000000000000011011101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * 62 DIV_8      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300b close to ij
 * 63 DIV_9      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000300f close to fence
 * 64 SLTIU_0    3a SRxI_1     00010000000000000111111101100010xx0 SLTIU  Set less than immediate (unsigned)                00003013 sltiu   
 * 65 LB_4       97 SW_E1SWH   00010000000000000010111101100011xx0        q = (uint8_t) mem[rs1+Iimm]                       00000000 
 * 66 ECAL_RET   94 SW_E4      00010000001100000101111100100110000 ECALL/(U/S/M)RET Select ECALL or (U/S/M)RET              00000000 
 * 67 EBRKWFI1   f1 aFaulte    00010000000000000xxxx11101100100000 EBREAK/WFI1 Prepare select EBREAK or WFI                 00000000 
 * 68 DIV_12     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003023 close to store
 * 69 LB_5       fe ILLe       00010000000000000010111101100000xx0        q = D^0xffffffff^q = D^0x80                       00000000 
 * 6a MULH_1     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40003023 close to store
 * 6b JALR_2     dd aF_SW_1    00000000000001100001011101000011xx0        Q = (RS1+imn) & 0xfffffffe                        00000000 
 * 6c SLTU_0     ab EBREAK_2   00010000000000000111011x01000xxxxx0 SLTU   Set less than (unsigned)                          00003033 sltu    
 * 6d MULHU_0    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 6e LB_2       fe ILLe       00010000100000000101001101100001xx1        Repeat shr until shreg == 0 (0,8,16,24 times)     40003033 sloppy sltu    
 * 6f aFaultd    c5 MRET_5     00000000000001111101011101000110000  err   LB Load access fault. Faulting adr to mtval       00000000 
 * 70 eILL0c     ffffffff (null)     00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 71 ECALL_3    36 SLLI_2     00000000000001111101011101000110000        mtval = 0, now start the chore of 11 to mcause    00000000 
 * 72 LDAF_2     9d _LDIV_11   00000110000001110001011000x00100110        Store 4 to mcause                                 00000000 
 * 73 SUB_1         (use dinx) 00010000000000000111111101100000xx0        Q = ~RS2                                          00000000 
 * 74 Fetch         (use dinx) 00000000000001000001111101010110000  Fr00  Read and latch instruction                        00000000 
 * 75 eFetch        (use dinx) 00001001010001000101111101010110000  Fr00  rep Read until d=mem[(rs1+ofs) & ~3u]             00000000 
 * 76 SW_E3      8e _LCSRRS_1  00010000000000000101111001100100110        Q = 3                                             00000000 
 * 77 AND_1      8e _LCSRRS_1  00010000000000000111011101100000xx0        RS1^0xffffffff to Q                               00000000 
 * 78 DIV_4      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003063 close to branch
 * 79 DIV_5      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00003067 close to jalr
 * 7a ECALL_4    94 SW_E4      00010000000000000101011001100100110        Q = 4                                             00000000 
 * 7b _L0x7b     10 SUB_1      00010000000000000000011100100110000 JAL    J-imm is in q.                                    0000306f jal     
 * 7c CSRRC_0    56 LH_4       00000000000001100011011101000110000 CSRRC  Decoded CSR adr in yy                             00003073 csrrc
 * 7d LASTINCH      (use dinx) 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        not in use                                        00000000 
 * 7e MRET_3     2b SLTIX_1    00010000000000000011011101100100110        0x102 + 0xff + 1 = 0x202                          00000000 
 * 7f condb_2       (use dinx) 00010000000000000111111101100000xx0        ~RS2 in Q                                         00000000 
 * 80 LBU_0      eb LH_3       00110000000000000110110101100100000 LBU    Load unsigned byte. Q = rdadr=RS1+Iimm.           00004003 lbu     
 * 81 EBREAK_2      (use dinx) 00000000000001101101011101000001xx0        pc to mepc                                        00000000 
 * 82 DIV_3      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400b close to ij
 * 83 DIVU_2     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000400f close to fence
 * 84 XORI_0     9e SH_4       00010000000000000111111101100010xx0 XORI   Xor immediate. Q=~Iimm                            00004013 xori    
 * 85 CSRRWI_1   86 JAL_2      0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * 86 LBU_2      af MRET_4     00010000100000000101001101100001xx1        Repeat shr until shreg = 0 (0, 8 or 16 times)     00000000 
 * 87 aFaulte       (use dinx) 00000000000001111101011101000110000  err   LBU Load access fault. Faulting adr to mtval      00000000 
 * 88 DIV_1      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004023 close to store
 * 89 IJ_4       fe ILLe       00100000010001010110111100100011xx0        Mask and use as PC                                00000000 
 * 8a DIV_6      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40004023 close to store
 * 8b condb_4    1e aFault_1   00010000000000000000011101101001xx0        Branch on condition                               00000000 
 * 8c XOR_0      a6 ECAL_RET   00010000000000000111111x01000xxxxx0 XOR    xor                                               00004033 xor     
 * 8d DIV_0      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * 8e Fetch2     fe ILLe       0000000000xx11011111111111100100000  Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned     40004033 sloppy xor     
 * 8f jFault     9f SH_5       00000000000001111101011101000110000  err   Fetch access fault. Faulting adr to mtval         00000000 
 * 90 IJ_1       af MRET_4     00010000010000000101111101100001xx0        Read until q=mem[(rs1+ofs)&~1u]                   00000000 
 * 91 IJT_1      f0 LBU_2      00010000010000000101111101100001xx0        Exit CSR, enter trap                              00000000 
 * 92 eILL0b     af MRET_4     00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 93 MRET_8     76 Fetchu     00010000000000000101011101100100110        Prep +4                                           00000000 
 * 94 SW_2       af MRET_4     00010000000000000001011x01000xxxxx0        Prepare read PC                                   00000000 
 * 95 aF_SW      2e _LMULHU_1  00010000000000000xxxx11x00100xxxxx0  err   SW/SH/SB access fault. Rest to set SEL_O=4'hf     00000000 
 * 96 eILL0a     41 JALR_1     00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 97 WFI_5      f1 aFaulte    00100000010001010110111000100100110        IncPC, OpFetch                                    00000000 
 * 98 BLT        7f JALRE2     00000000000001100111011101000110000 BLT    Conditional Branch. Offset to Ryy                 00004063 blt     
 * 99 MUL_1      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004067 close to jalr
 * 9a eILL0b     af MRET_4     00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * 9b MRET_8        (use dinx) 00010000000000000101011101100100110        Prep +4                                           00000000 
 * 9c DIV_2      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00004073 close to csr/system 
 * 9d ANDI_1     fe ILLe       00000000000000100001011101000011xx0        rd = Iimm & RS1                                   00000000 
 * 9e XORI_1     f6 WFI_1      00000000000000100001011101000000xx0        rd = Iimm ^ RS1                                   00000000 
 * 9f ILL_4      94 SW_E4      00000110000001110100111100x00100110        Store 2 to mcause                                 00000000 
 * a0 LHU_0      34 JAL_3      00100000000101100110110101100100000 LHU    Load unsigned hword. Q = rdadr=RS1+Iimm           00005003 lhu     
 * a1 MRET_5     d3 aFaultd    00010000000000000000011101100010xx0        ~302                                              00000000 
 * a2 DIV_e      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000500b close to ij
 * a3 OR_1       fe ILLe       00000000000001000111011101000000xx0        RS1^0xffffffff to jj                              0000500f close to fence
 * a4 SRxI_0     b2 CSRRW_4    00010000000000000111100100x00110000 SRxI   Shift Right immediate (both logic/arith here)     00005013 sr(l/a)i
 * a5 IJT_4      b3 CSRRWI_1   00100000000001101110111101100011xx0        Mask and store to mepc and Q for read of instr    00000000 
 * a6 XOR_1      16 condb_5    00010000000000000111011101100000xx0        Q = RS1^0xFFFFFFFF                                00000000 
 * a7 _LMULHU_1  ce _LCSRRCI_1 00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * a8 DIV_E      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005023 close to store
 * a9 QINT_1     af MRET_4     00000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * aa DIV_D      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40005023 close to store
 * ab SLTX_1     37 ECALL_2    00010000000000000111111101100000xx0        ~rs2 to Q                                         00000000 
 * ac _L0xac     b6 ECALL_5    00010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    00005033 srl     
 * ad DIVU_0     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ae _L0xae     b6 ECALL_5    00010000000000000111011x00x00xxxxx0 SRx    Shift Right (both SRL and SRA)                    40005033 sra
 * af JAL_3      a1 ECALL_4    00100000010001010110111100100001xx0        PC+imm/trap entrypt to PC. OpFetch                00000000 
 * b0 SLLI_1     bb SH_2       00000000000000100101101101100001xx0        Register to shift to Q (and TRG for shift 0)      00000000 
 * b1 ECALL_2    f0 LBU_2      00000000000001101xxxx11101001001xx0        mepc = pc, prep store 0 to mtval                  00000000 
 * b2 SRxI_1     74 oleduck    00000000000000100101001101100001xx1        Register to shift to Q                            00000000 
 * b3 MRET_4        (use dinx) 00010000000000000xxxx11101100100110        0x202 + 0xff + 1 = 0x302                          00000000 
 * b4 SRxI_2     50 LW_1       00000000100000100101001101100001xx1        Repeat Q >>= 1 until shregcnt == 0                00000000 
 * b5 SLL_1      f5 jFault     00010000000000000111100100x00001xx0        Shiftamount was in low 5 bits of RS2              00000000 
 * b6 SRx_1      37 ECALL_2    00010000000000000111100100x00001xx0        Shiftamount in low 5 bits of RS2                  00000000 
 * b7 CSRRW_3    89 _LDIV_F    00010000000000000101011001100100110        Prep emulation entrypt 0x108, here Q to 0x104     00000000 
 * b8 BGE        7f JALRE2     00000000000001100111011101000110000 BGE    Conditional Branch. Offset to Ryy                 00005063 bge     
 * b9 MUL_3      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00005067 close to jalr
 * ba ILL_1      9d _LDIV_11   00000000000001101101011100x00001xx0        Store PC to mepc                                  00000000 
 * bb CSRRW_4    3f SRx_1      00100000010001010110111000100100110        IncPC, OpFetch, but force +4                      00000000 
 * bc CSRRWI_0   56 LH_4       00000000000001100011011101000110000 CSRRWI Decoded CSR adr in yy                             00005073 csrrwi
 * bd ILL_2      74 oleduck    00000000000001111101011101000001xx0        Store 0 to mtval                                  00000000 
 * be CSRRW_2    09 LB_5       00000100000000011101011100100001xx0        Write PC to 0x100 start Prep emulation entrypt    00000000 
 * bf straddle   45 WFI_3      10100000010001010110111000100100110  Fr00u IncPC, OpFetch                                    00000000 
 * c0 DIVU_5     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006003 close to load
 * c1 _LCSRRCI_1 f7 EBREAK_1   00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * c2 DIVU_3     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600b close to ij
 * c3 MULH_3     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000600f close to fence
 * c4 ORI_0      e1 ORI_1      00000000000001000111111101000010xx0 ORI    Or immediate. jj=~Iimm                            00006013 ori     
 * c5 MRET_7     5a SB_1       00010000000000000011011x01001xxxxx0        Prepare emulation entry point 0x104               00000000 
 * c6 LH_4       bd IJ_4       00010000000000000100011101100011xx0        q = (uint16_t) mem[rs1+Iimm]                      00000000 
 * c7 LH_5       4b CSRRW_2    00010000000000000100011101100000xx0        q = D^0xffffffff^q = D ^ 0x00008000               00000000 
 * c8 _L0x99     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (at illegal entrypt)            00006023 close to store
 * c9 LDAF_a     7e NMI_1      00010000000000000101011x01000xxxxx0        Extra cycle after error detected write mtval      00000000 
 * ca DIVU_4     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          40006023 close to store
 * cb SB_1       1e aFault_1   00000000000001100101101101100001xx0        Write d to Q and yy (for sh 0). Prep shift        00000000 
 * cc OR_0       a3 _LDIV_15   00010000000000000111111x01000xxxxx0 OR     or                                                00006033 or      
 * cd REM_0      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ce EBRKWFI2   fe ILLe       00000000000001000011011101001010xx0 EBREAK/WFI2 Select EBREAK or WFI                         40006033 sloppy or      
 * cf WFI_4      9b ILL_5      00010000000000000001011x01001xxxxx0        Prepare read PC                                   00000000 
 * d0 _LDIV_13   b1 aF_SW_3    00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * d1 SB_4       49 CSRRW_1    01110000000000010110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * d2 _LDIV_C    61 EBRKWFI2   00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * d3 ECALL_5    36 SLLI_2     00010000000000000101011001100100110        Q = 8                                             00000000 
 * d4 LBU_3      f0 LBU_2      00010000000000000011011101100010xx0        Invert q. Prepare read mask                       00000000 
 * d5 BAERR_1    bf IJT_1      0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       not used                                           00000000 
 * d6 oleduck    fe ILLe       0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  why oleduck                                             00000000 
 * d7 IJ_3       7a SB_5       00010000000000000110011101100100110        Construct Q = 1                                   00000000 
 * d8 BLTU       7f JALRE2     00000000000001100111011101000110000 BLTU   Conditional Branch. Offset to Ryy                 00006063 bltu    
 * d9 MUL_2      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00006067 close to jalr
 * da doleduck   72 LBU_3      0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  why doleduck                                            00000000 
 * db aFault_2   f0 LBU_2      00000110000001110001011100x00100110        Store 5 to mcause                                 00000000 
 * dc CSRRSI_0   56 LH_4       00000000000001100011011101000110000 CSRRSI Decoded CSR adr in yy                             00006073 csrrsi
 * dd SB_5       f3 aF_SW      00000000000000010110011100100001xx0        Write d to a+k until accepted                     00000000 
 * de BAERR_4    8e _LCSRRS_1  0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       not used                                           00000000 
 * df jFault_1   8e _LCSRRS_1  00000000000001110001011100x00100110        Store 1 to mcause                                 00000000 
 * e0 DIV_10     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007003 close to load
 * e1 ORI_1      01 LB_1       00010000000000000000011101100001xx0        Q = RS1                                           00000000 
 * e2 DIV_7      fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700b close to ij
 * e3 DIVU_1     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          0000700f close to fence
 * e4 ANDI_0     9d _LDIV_11   00010000000000000111111101100010xx0 ANDI   And immediate. Q=~Iimm                            00007013 andi    
 * e5 _LMULHU_5  3d SRxI_2     00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * e6 NMI_1      74 oleduck    00000000000001101xxxx11101000001xx0        Store pc to mepc.                                 00000000 
 * e7 JALRE2     36 SLLI_2     0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * e8 DIV_14     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007023 close to store
 * e9 LH_3       a5 MRET_3     00010000000000000011111101100010xx0        q = ~mem[rs1+ofs]                                 00000000 
 * ea JAERR_2    fe ILLe       0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        40007023 close to store
 * eb LBU_1      c6 IJT_4      00010001010000000101111101100001xx1        Read until q=mem[(rs1+ofs) & ~3u]                 00000000 
 * ec AND_0      77 eFetchu    00010000000000000111111x01000xxxxx0 AND    And                                               00007033 and     
 * ed REMU_0     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Math entry point not used                                00000000 
 * ee _LDIV_F    fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 40007033 sloppy and     
 * ef _LCSRRS_1  74 oleduck    00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f0 LDAF_3     d4 aFault_2   00000000000001101100111100x00001xx0        PC to mepc                                        00000000 
 * f1 SW_E2      36 SLLI_2     00000000000001101101111101000001xx0        Store address that faulted                        00000000 
 * f2 ILL_5      1e aFault_1   0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        Not in use                                        00000000 
 * f3 aF_SW_2    57 LH_5       00010000000000000101011001100100110        Q = 4                                             00000000 
 * f4 _LDIV_11   53 LDAF_LH    00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * f5 SH_4       df eFetch     01110000000000001110011101100001xx0        Address back to Q. Prepare get item to write      00000000 
 * f6 SH_5       fb SB_3       00000000000000001110011100100001xx0        Write d to a+k until accepted                     00000000 
 * f7 IJT_3      81 JAERR_2    00010000000000000110011101100100110        Construct Q = 1                                   00000000 
 * f8 BGEU       7f JALRE2     00000000000001100111011101000110000 BGEU   Conditional Branch. Offset to Ryy                 00007063 bgeu    
 * f9 MULH_2     fe ILLe       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen (math)                          00007067 close to jalr
 * fa _LDIV_15   52 LH_1       00010000000000000xxxx11x00x00xxxxx0 Illegal instruction seen                                 00000000 
 * fb WFI_2      d1 MRET_1     00010000000000000101011101100100110        Check offset                                      00000000 
 * fc CSRRCI_0   56 LH_4       00000000000001100011011101000110000 CSRRCI Decoded CSR adr in yy                             00007073 csrrci
 * fd NMI_0      e6 StdIncPc   00010000000000000001011x01000xxxxx0 NMI    Get current PC                                    00000000 
 * fe ILLe       ba LHU_3      00010000000000000001011x00x00xxxxx0 Illegal                                                  00000000 
 * ff QINT_0     a9 ILL_4      00010000000000000001011x01000xxxxx0 INT    Get current PC                                    00000000 
 *   9 294  64 154 Can not simplify, no legal mapping
 *   8  22  20 470 Can not simplify, no legal mapping
 *   7  22 297 193 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   6  22 283 207 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   5  22 289 201 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   4  22 332 158 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   3  22 252 238 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   2  22 315 175 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   1  22 354 136 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 *   0  22 174 316 Can not simplify, can't represent fixed locations with any less than 8 bits of the index
 */
localparam u0_0 = 256'h30e6001030e608041886205a008b205a18091007000420e600e620be09d22001;
localparam u0_1 = 256'h30b726d438e630a6303218e62041301320de00e64816261500140000001a008b;
localparam u0_2 = 256'h30e600fe30e6003e2630209600212096201d00270004303500e600fe00e62052;
localparam u0_3 = 256'h083a0835090330493032093d00fe301348d72803083608de00002086002b32e6;
localparam u0_4 = 256'h26e600fe00fe003108b02066264b2066088f08472665102b00fe00fe260b2050;
localparam u0_5 = 256'h30da097028fb30493032085d00fe00fe008b1857301e09eb30da095430da08e6;
localparam u0_6 = 256'h26cf00fe00fe0031087a00fe00fe00fe309308f240ef102b00fe00fe50f700fe;
localparam u0_7 = 256'h0000089000003049303208f200fe00feb0f4b0f4000000000000101a301e09ba;
localparam u0_8 = 256'h26a900fe00fe002926e600fe00fe00fe0000263409f0102100fe00fe00002085;
localparam u0_9 = 256'h08f2089f00fe00fe0000203400fe3013309308bb269428340895083426923034;
localparam u0_A = 256'h26c5003f00fe003f089a00fe263400fe206130d026af303a00fe00fe26b6205e;
localparam u0_B = 256'h08c1081f18de304928b5101a00fe301326bd269a309e2676000026de209226b2;
localparam u0_C = 256'h404f00fe00fe002630e600fe20a500fe08cb1847106f10e100fe00fe30e900fe;
localparam u0_D = 256'hb0f4b0f430e530492692009100fe301330a100fe30b42692301e090630c92637;
localparam u0_E = 256'h26de00fe00fe0011105600fe26c600fe301e26de26b1101a00fe00fe081d00fe;
localparam u0_F = 256'h00c70046007e3049306b264500fe301330ab26fa30db20d500dd00e6301e0972;
localparam u1_0 = 256'h10ba03b210ba03bb30ba23ab017b23ab017b01bb003110ba00b2837b02fb036b;
localparam u1_1 = 256'h32ba02b310ba82f9003910ba22ba33ba2b7900b2003b033b03fb000003bb03fb;
localparam u1_2 = 256'h10ba003010ba03b0003aa3ab03bba3ab003b23ba003103c800b2003010bab36b;
localparam u1_3 = 256'h03c803c8129b31ba0039129b003033ba343a12db12db2b79000030ba03fb10ba;
localparam u1_4 = 256'h02bb0030003003b20eb983bb003b83bb3eba36b802bb03fb00300030003b837b;
localparam u1_5 = 256'h3eb902fb32db31ba003932db00300030023b023b3eba029b3eb902fb3eb912fa;
localparam u1_6 = 256'h003b0030003003b20b3b0030003000303cb80fb900b203fb0030003021ba0030;
localparam u1_7 = 256'h0000343a000031ba00390b390030003002fa00fa00000000000001bb3eba029b;
localparam u1_8 = 256'h02bb0030003003f210ba0030003000300000133002fb03fb003000300000036b;
localparam u1_9 = 256'h0739073b0030003000003a70003033ba3cb832db02f33a7836fa367838b03d3a;
localparam u1_A = 256'h003b03b0003003b036ba00303a780030003b82f901bb03c80030003002b3b36b;
localparam u1_B = 256'h02fb02fb2b7931ba32db01fb003033ba033b02b3003a2b7100002b7138b002b3;
localparam u1_C = 256'h01b20030003003f23d3a003001b30030343a377b003b23fa0030003032ba0030;
localparam u1_D = 256'h22fa20fa3eba31ba38b802b2003033ba3eba003000ba38b83eba029b21ba00bb;
localparam u1_E = 256'h2b710030003003f201fb0030033b00303eba2b7102b303fb00300030003b0030;
localparam u1_F = 256'h00b200b000b231ba003a02bb003033ba3cba00333eba6fff003100b23eba029b;
localparam u2_0 = 256'h00000080000000800000080000800800008000800080080000800890008a0980;
localparam u2_1 = 256'h0000188000000080008000000800000009020080008008800080000000800080;
localparam u2_2 = 256'h0000008000000080088008000080080008800000008000800080008000000900;
localparam u2_3 = 256'h0080008000040000008000000080000000000004000001020000080000800000;
localparam u2_4 = 256'h088000800080008000200b8108800b8100000000088000800080008008800981;
localparam u2_5 = 256'h0000008a00040000008000000080008000800080000000840000008a00000042;
localparam u2_6 = 256'h0880008000800080038000800080008000000000008000800080008000000080;
localparam u2_7 = 256'h0000000000000000008000000080008000ca0080000000000000008000000084;
localparam u2_8 = 256'h0080008000800080180000800080008000001c00008a00800080008000000980;
localparam u2_9 = 256'h0000038000800080000008300080000000000000188000300000000018300030;
localparam u2_A = 256'h0880008000800080000000800830008008800081088000800080008018800900;
localparam u2_B = 256'h008200820102000000040080008000000880188000801d020000190208301880;
localparam u2_C = 256'h0080008000800080003000800880008000000100008000000080008000000080;
localparam u2_D = 256'h004a000000000000080000800080000000000080008008300000008400000880;
localparam u2_E = 256'h1902008000800080008000800880008000001d02188000800080008000800080;
localparam u2_F = 256'h0080008000800000008008800080000000001880000008000080008000000084;
