                 buser/dinx                                                                                                             progress  (RAM)      Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ       ACK      S T E t r |mie ft Micro                                                                         
start|| ucode    ||||may            c v u                                                                                    |          ||WE       STB| SEL  epepepepep\\csr|| code                                                                          
  cy||| |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
0000-00 80002020 000000 00 00000000 0 0 0 00000108 0080      00000000 00000000 00000000 00000000 00000000 h 00000000 passQ   0 00000003 1... ... ... .. 0000 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0001 01 80036b20 000100 00 00000000 0 0 0 00000108 0000      00000000 00000000 00000000 00000000 00000000 u 00000000 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 18 LB_1           Read until q=mem[rs1+ofs) & ~3u]                
0002 d2 8a02fb09 000100 00 00000000 0 0 0 00000108 00a8      00000000 00000000 00000000 00000000 00000000 u 00000001 passD   0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_2           Repeat shr until shreg == 0 (0,8,16,24 times)   
0003 06 84029b09 000100 00 00000000 0 0 0 00000108 00a8      00000000 00000001 00000000 00000000 00000000 h 00000001 passD   0 00000000 1... ... ... .. 1111 0000000000 000 00 LB_3           q = ~mem[rs1+ofs]                               
0004 07 8001bb10 000100 00 00000000 0 0 0 00000108 0098      00000000 00000001 00000000 00000000 00000000 u 00000001 INVQ    0 ffffffff 11.. ... ... .. 1111 0000000000 000 1f LB_4           q = (uint8_t) mem[rs1+Iimm]                     
0005 09 80017b18 000100 00 00000000 0 0 0 00000108 0094      00000000 00000001 000000ff 000000ff ffffffff u 00000001 nearAND 0 00000000 11.. ... ... .. 1111 0000000000 000 1f LB_5           q = D^0xffffffff^q = D^0x80                     
0006 a3 80017b00 000100 00 00000000 0 0 0 00000108 0094      00000000 00000001 ffffff7f ffffff7f 00000000 u 00000001 nearXOR 0 00000080 11.. ... ... .. 1111 0000000000 000 1f LB_6           WTRG=(D^0x80)+0xFFFFFF7F+1=(D^0x80)-0x80        
0007 e6 0010ba26 000110 00 00000000 0 0 0 00000108 0088 0080 00000000 00000001 ffffff7f ffffff7f 00000080 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
0008 de 022b7126 000110 00 00000000 0 0 0 00000108 010c 0088 00000000 00000001 00000108 00000108 00000000 u 00000001 ADD     0 0000010c 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0009 f4 8000fa88 000100 00 00000000 0 0 0 0000010c 008c      00000000 00000001 18490e71 18490e71 0000010c z 00000001 passD   0 18490e71 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
000a 04 006fff20 010000 04 01ce0e13 0 1 0 0000010c 0070 008c 00000000 00000001 00000000 00000000 00000000 u 00000001 ADD     0 00000001 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x28,x28,28
000b e6 0010ba20 000000 04 01ce0e13 0 1 0 0000010c 0088 0070 00000000 00000001 00000000 00000000 0000001c z 00000001 ADD     0 0000001c 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
000c de 022b7126 000010 04 01ce0e13 0 1 0 0000010c 010c 0088 00000000 00000001 0000010c 0000010c 00000000 u 00000001 ADD     0 0000010e 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
000d f4 8000fa88 000000 04 01ce0e13 1 1 0 0000010e 008c      00000000 00000001 18490e71 18490e71 0000010e z 00000001 passD   0 18490e71 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
000e 04 006fff20 010000 04 ff280813 1 1 0 0000010e 0040 008c 00000000 00000001 00000001 00000001 00000000 u 00000001 ADD     0 00000002 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x16,x16,-14
000f e6 0010ba20 000000 04 ff280813 1 1 0 0000010e 0088 0040 00000000 00000001 00000000 00000000 fffffff2 z 00000001 ADD     0 fffffff2 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
0010 de 022b7126 000010 04 ff280813 1 1 0 0000010e 0110 0088 00000000 00000001 0000010e 0000010e 00000000 u 00000001 ADD     0 00000110 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0011 f4 8000fa88 000000 04 ff280813 0 1 0 00000110 008c      00000000 00000001 410e00b3 410e00b3 00000110 z 00000001 passD   0 410e00b3 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
0012 0e 006fff20 010000 0e 410e00b3 0 0 0 00000110 0070 008c 00000000 00000001 00000002 00000002 00000000 u 00000001 ADD     0 00000003 11.. ... ... .. 1111 0000000000 000 1f SUB_0   SUB    Subtraction                                     "sub"    x1,x28,x16
0013 10 8003b200 000000 0e 410e00b3 0 0 0 00000110 0040      00000000 00000001 0000001c 0000001c 00000410 z 00000001 nearXOR 0 fffffbf0 11.. ... ... .. 1111 0000000000 000 1f SUB_1          Q = ~RS2                                        
0014 a3 8003fb00 000000 0e 410e00b3 0 0 0 00000110 0070      00000000 00000001 fffffff2 fffffff2 00000000 u 00000001 nearXOR 0 0000000d 11.. ... ... .. 1111 0000000000 000 1f LB_6           WTRG=(D^0x80)+0xFFFFFF7F+1=(D^0x80)-0x80        
0015 e6 0010ba26 000010 0e 410e00b3 0 0 0 00000110 0088 0004 00000000 00000001 0000001c 0000001c 0000000d z 00000001 ADD     0 0000002a 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
0016 de 022b7126 000010 0e 410e00b3 0 0 0 00000110 0114 0088 00000000 00000001 00000110 00000110 00000000 u 00000001 ADD     0 00000114 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0017 f4 8000fa88 000000 0e 410e00b3 0 0 0 00000114 008c      00000000 00000001 02a00113 02a00113 00000114 z 00000001 passD   0 02a00113 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
0018 04 006fff20 010000 04 02a00113 0 0 0 00000114 0000 008c 00000000 00000001 00000003 00000003 00000000 u 00000001 ADD     0 00000004 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x2,x0,42
0019 e6 0010ba20 000000 04 02a00113 0 0 0 00000114 0088 0008 00000000 00000001 00000000 00000000 0000002a z 00000001 ADD     0 0000002a 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
001a de 022b7126 000010 04 02a00113 0 0 0 00000114 0118 0088 00000000 00000001 00000114 00000114 00000000 u 00000001 ADD     0 00000118 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
001b f4 8000fa88 000000 04 02a00113 0 0 0 00000118 008c      00000000 00000001 00111463 00111463 00000118 z 00000001 passD   0 00111463 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
                 buser/dinx                                                                                                             progress STB(IO)     Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ    |sysack     S T E t r |mie ft Micro                                                                         
     || ucode    ||||may            c v u                                                                                    |          ||WE     ||ACK  SEL  epepepepep\\csr|| code                                                                          
  cy || |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
001c 38 006fff20 010000 38 00111463 0 0 0 00000118 0008 008c 00000000 00000001 00000004 00000004 00000000 u 00000001 ADD     0 00000005 11.. ... ... .. 1111 0000000000 000 1f BNE     BNE    Conditional Branch. Offset to Ryy               bne      x2,x1,120
001d 13 0033ba30 000000 38 00111463 0 0 0 00000118 0004 00b0 00000000 00000001 0000002a 0000002a 00000008 z 00000001 passQ   0 00000008 11.. ... ... .. 1111 0000000000 000 1f condb_2        ~RS2 in Q                                       
001e 14 8003fb00 000000 38 00111463 0 0 0 00000118 0008      00000000 00000001 0000002a 0000002a 00000000 u 00000001 nearXOR 0 ffffffd5 11.. ... ... .. 1111 0000000000 000 1f condb_3        Calculate RS1+~RS2+1                            
001f 15 8000bb26 000000 38 00111463 0 0 0 00000118 0088      00000000 00000001 0000002a 0000002a ffffffd5 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f condb_4        Branch on condition                             
0020 16 80033b48 000010 38 00111463 0 0 0 00000118 00b0      00000000 00000001 00000118 00000118 00000000 u 00000001 passD   0 00000118 11.. ... ... .. 1111 0000000000 000 1f condb_5        Branch not taken.                               
0021 de 022b7136 000010 38 00111463 0 0 0 00000118 011c 0088 00000000 00000001 00000008 00000008 00000118 u 00000001 passQ   0 0000011c 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0022 f4 8000fa88 000000 38 00111463 0 0 0 0000011c 008c      00000000 00000001 00003033 00003033 0000011c z 00000001 passD   0 00003033 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
../../obj_dir/RVC/t101.bin               success     6 instructions in     35 cycles, cpi = -4.83
