                 buser/dinx                                                                                                             progress  (RAM)      Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ       ACK      S T E t r |mie ft Micro                                                                         
start|| ucode    ||||may            c v u                                                                                    |          ||WE       STB| SEL  epepepepep\\csr|| code                                                                          
  cy||| |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
0000-00 80002020 000000 00 00000000 0 0 0 0000017c 0080      00000000 00000000 00000000 00000000 00000000 h 00000000 passQ   0 00000003 1... ... ... .. 0000 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0001-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000000 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 18 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0002-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0003-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0004-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0005-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0006-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0007-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0008-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0009-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
000a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
000b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
000c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
000d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
000e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
000f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0010-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0011-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0012-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0013-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0014-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0015-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0016-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0017-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0018-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0019-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
001a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
001b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
                 buser/dinx                                                                                                             progress STB(IO)     Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ    |sysack     S T E t r |mie ft Micro                                                                         
start|| ucode    ||||may            c v u                                                                                    |          ||WE     ||ACK  SEL  epepepepep\\csr|| code                                                                          
  cy||| |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
001c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
001d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
001e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
001f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0020-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0021-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0022-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0023-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0024-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0025-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0026-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0027-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0028-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0029-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
002a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
002b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
002c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
002d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
002e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
002f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0030-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0031-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0032-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0033-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0034-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0035-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0036-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0037-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
                 buser/dinx                                                                                                             progress  (RAM)      Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ       ACK      S T E t r |mie ft Micro                                                                         
start|| ucode    ||||may            c v u                                                                                    |          ||WE       STB| SEL  epepepepep\\csr|| code                                                                          
  cy||| |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
0038-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0039-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
003a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
003b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
003c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
003d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
003e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
003f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0040-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0041-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0042-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0043-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0044-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0045-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0046-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0047-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0048-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0049-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
004a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
004b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
004c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
004d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
004e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
004f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0050-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0051-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0052-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0053-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
                 buser/dinx                                                                                                             progress STB(IO)     Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ    |sysack     S T E t r |mie ft Micro                                                                         
start|| ucode    ||||may            c v u                                                                                    |          ||WE     ||ACK  SEL  epepepepep\\csr|| code                                                                          
  cy||| |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
0054-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0055-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0056-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0057-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0058-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0059-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
005a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
005b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
005c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
005d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
005e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
005f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0060-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0061-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0062-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0063-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0064-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0065-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0066-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0067-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0068-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0069-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
006a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
006b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
006c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
006d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
006e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
006f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
                 buser/dinx                                                                                                             progress  (RAM)      Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ       ACK      S T E t r |mie ft Micro                                                                         
start|| ucode    ||||may            c v u                                                                                    |          ||WE       STB| SEL  epepepepep\\csr|| code                                                                          
  cy||| |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
0070-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0071-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0072-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0073-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0074-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0075-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0076-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0077-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0078-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0079-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
007a-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
007b-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
007c-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
007d-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
007e-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
007f-00 80036b20 000000 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_0    LB     Load byte. q = rdadr=RS1+0fs                    
0080 01 80036b20 000100 00 00000000 0 0 0 0000017c 0000      00000000 00000000 00000000 00000000 00000000 u 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_1           Read until q=mem[rs1+ofs) & ~3u]                
0081 d2 8a02fb09 000100 00 00000000 0 0 0 0000017c 00a8      00000000 00000001 00000000 00000000 00000000 u 00000001 passD   0 00000000 11.. ... ... .. 1111 0000000000 000 00 LB_2           Repeat shr until shreg == 0 (0,8,16,24 times)   
0082 06 84029b09 000100 00 00000000 0 0 0 0000017c 00a8      00000000 00000001 00000000 00000000 00000000 h 00000001 passD   0 00000000 1... ... ... .. 1111 0000000000 000 00 LB_3           q = ~mem[rs1+ofs]                               
0083 07 8001bb10 000100 00 00000000 0 0 0 0000017c 0098      00000000 00000001 00000000 00000000 00000000 u 00000001 INVQ    0 ffffffff 11.. ... ... .. 1111 0000000000 000 1f LB_4           q = (uint8_t) mem[rs1+Iimm]                     
0084 09 80017b18 000100 00 00000000 0 0 0 0000017c 0094      00000000 00000001 000000ff 000000ff ffffffff u 00000001 nearAND 0 00000000 11.. ... ... .. 1111 0000000000 000 1f LB_5           q = D^0xffffffff^q = D^0x80                     
0085 a3 80017b00 000100 00 00000000 0 0 0 0000017c 0094      00000000 00000001 ffffff7f ffffff7f 00000000 u 00000001 nearXOR 0 00000080 11.. ... ... .. 1111 0000000000 000 1f LB_6           WTRG=(D^0x80)+0xFFFFFF7F+1=(D^0x80)-0x80        
0086 e6 0010ba26 000110 00 00000000 0 0 0 0000017c 0088 0080 00000000 00000001 ffffff7f ffffff7f 00000080 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
0087 de 022b7126 000110 00 00000000 0 0 0 0000017c 0180 0088 00000000 00000001 0000017c 0000017c 00000000 u 00000001 ADD     0 00000180 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0088 f4 8000fa88 000100 00 00000000 0 0 0 00000180 008c      00000000 00000001 00001137 00001137 00000180 z 00000001 passD   0 00001137 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
0089 2f 006fff20 010000 2f 00001137 0 0 0 00000180 0000 008c 00000000 00000001 00000000 00000000 00000000 u 00000001 ADD     0 00000009 11.. ... ... .. 1111 0000000000 000 1f _L2f    LUI    q = imm20                                       lui      x2,0x1
008a e6 0010ba30 000000 2f 00001137 0 0 0 00000180 0088 0008 00000000 00000001 00000000 00000000 00001000 z 00000001 passQ   0 00001000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
008b de 022b7126 000010 2f 00001137 0 0 0 00000180 0184 0088 00000000 00000001 00000180 00000180 00000000 u 00000001 ADD     0 00000184 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
                 buser/dinx                                                                                                             progress STB(IO)     Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ    |sysack     S T E t r |mie ft Micro                                                                         
     || ucode    ||||may            c v u                                                                                    |          ||WE     ||ACK  SEL  epepepepep\\csr|| code                                                                          
  cy || |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
008c f4 8000fa88 000000 2f 00001137 0 0 0 00000184 008c      00000000 00000001 80010113 80010113 00000184 z 00000001 passD   0 80010113 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
008d 04 006fff20 010000 04 80010113 0 0 0 00000184 0008 008c 00000000 00000001 00000009 00000009 00000000 u 00000001 ADD     0 0000000d 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x2,x2,-2048
008e e6 0010ba20 000000 04 80010113 0 0 0 00000184 0088 0008 00000000 00000001 00001000 00001000 fffff800 z 00000001 ADD     0 00000800 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
008f de 022b7126 000010 04 80010113 0 0 0 00000184 0188 0088 00000000 00000001 00000184 00000184 00000000 u 00000001 ADD     0 00000188 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0090 f4 8000fa88 000000 04 80010113 0 0 0 00000188 008c      00000000 00000001 00000117 00000117 00000188 z 00000001 passD   0 00000117 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
0091 05 006fff20 010000 05 00000117 0 0 0 00000188 0000 008c 00000000 00000001 0000000d 0000000d 00000000 u 00000001 ADD     0 00000011 11.. ... ... .. 1111 0000000000 000 1f _L05    AUIPC  q = imm20 (copy x/8)                            auipc    x2,0x0
0092 04 8000b100 000000 05 00000117 0 0 0 00000188 0088      00000000 00000001 00000000 00000000 00000000 h 00000001 nearXOR 0 fffffffc 1... ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         
0093 e6 0010ba20 000000 05 00000117 0 0 0 00000188 0088 0008 00000000 00000001 00000188 00000188 00000000 z 00000001 ADD     0 00000188 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
0094 de 022b7126 000010 05 00000117 0 0 0 00000188 018c 0088 00000000 00000001 00000188 00000188 00000000 u 00000001 ADD     0 0000018c 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0095 f4 8000fa88 000000 05 00000117 0 0 0 0000018c 008c      00000000 00000001 04810113 04810113 0000018c z 00000001 passD   0 04810113 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
0096 04 006fff20 010000 04 04810113 0 0 0 0000018c 0008 008c 00000000 00000001 00000011 00000011 00000000 u 00000001 ADD     0 00000016 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x2,x2,72
0097 e6 0010ba20 000000 04 04810113 0 0 0 0000018c 0088 0008 00000000 00000001 00000188 00000188 00000048 z 00000001 ADD     0 000001d0 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
0098 de 022b7126 000010 04 04810113 0 0 0 0000018c 0190 0088 00000000 00000001 0000018c 0000018c 00000000 u 00000001 ADD     0 00000190 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
0099 f4 8000fa88 000000 04 04810113 0 0 0 00000190 008c      00000000 00000001 01854181 01854181 00000190 z 00000001 passD   0 01854181 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
009a 04 006fff20 010000 04 00000193 0 1 0 00000190 0000 008c 00000000 00000001 00000016 00000016 00000000 u 00000001 ADD     0 0000001a 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x3,x0,0
009b e6 0010ba20 000000 04 00000193 0 1 0 00000190 0088 000c 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
009c de 022b7126 000010 04 00000193 0 1 0 00000190 0190 0088 00000000 00000001 00000190 00000190 00000000 u 00000001 ADD     0 00000192 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
009d f4 8000fa88 000000 04 00000193 1 1 0 00000192 008c      00000000 00000001 01854181 01854181 00000192 z 00000001 passD   0 01854181 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
009e 04 006fff20 010000 04 00118193 1 1 0 00000192 000c 008c 00000000 00000001 0000001a 0000001a 00000000 u 00000001 ADD     0 0000001e 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x3,x3,1
009f e6 0010ba20 000000 04 00118193 1 1 0 00000192 0088 000c 00000000 00000001 00000000 00000000 00000001 z 00000001 ADD     0 00000001 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00a0 de 022b7126 000010 04 00118193 1 1 0 00000192 0194 0088 00000000 00000001 00000192 00000192 00000000 u 00000001 ADD     0 00000194 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00a1 f4 8000fa88 000000 04 00118193 0 1 0 00000194 008c      00000000 00000001 4201c00e 4201c00e 00000194 z 00000001 passD   0 4201c00e 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00a2 48 006fff20 010000 48 00312023 0 1 0 00000194 0008 008c 00000000 00000001 0000001e 0000001e 00000000 u 00000001 ADD     0 00000022 11.. ... ... .. 1111 0000000000 000 1f _L48    SW     Store word. Q=wradr=RS1+Simm                    sw       x3,0(x2)
00a3 66 8183bb20 000010 48 00312023 0 1 0 00000194 000c      00000000 00000001 000001d0 000001d0 00000000 u 00000001 ADD     0 000001d0 11.. ... ... .. 1111 0000000000 000 1f SW_1           Write d to a+k until accepted                   
00a4 f2 000fb908 000000 48 00312023 0 1 0 00000194 000c 01d0 00000000 00000001 00000001 00000001 000001d0 h 00000001 passD   0 00000001 1... ... ... .. 1111 0000000000 000 1f SW_2           Prepare read PC                                 
00a5 e6 8000b200 000000 48 00312023 0 1 0 00000194 0088      00000000 00000001 00000001 00000001 000001d0 z 00000001 nearXOR 1 fffffe2f 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00a6 de 022b7126 000010 48 00312023 0 1 0 00000194 0194 0088 00000000 00000001 00000194 00000194 00000000 u 00000001 ADD     0 00000196 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00a7 f4 8000fa88 000000 48 00312023 1 1 0 00000196 008c      00000000 00000001 4201c00e 4201c00e 00000196 z 00000001 passD   0 4201c00e 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
                 buser/dinx                                                                                                             progress  (RAM)      Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ       ACK      S T E t r |mie ft Micro                                                                         
     || ucode    ||||may            c v u                                                                                    |          ||WE       STB| SEL  epepepepep\\csr|| code                                                                          
  cy || |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
00a8 04 006fff20 010000 04 00000213 1 1 0 00000196 0000 008c 00000000 00000001 00000022 00000022 00000000 u 00000001 ADD     0 00000028 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x4,x0,0
00a9 e6 0010ba20 000000 04 00000213 1 1 0 00000196 0088 0010 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00aa de 022b7126 000010 04 00000213 1 1 0 00000196 0198 0088 00000000 00000001 00000196 00000196 00000000 u 00000001 ADD     0 00000198 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00ab f4 8000fa88 000000 04 00000213 0 1 0 00000198 008c      00000000 00000001 c2120209 c2120209 00000198 z 00000001 passD   0 c2120209 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00ac 04 006fff20 010000 04 00220213 0 1 0 00000198 0010 008c 00000000 00000001 00000028 00000028 00000000 u 00000001 ADD     0 0000002c 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x4,x4,2
00ad e6 0010ba20 000000 04 00220213 0 1 0 00000198 0088 0010 00000000 00000001 00000000 00000000 00000002 z 00000001 ADD     0 00000002 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00ae de 022b7126 000010 04 00220213 0 1 0 00000198 0198 0088 00000000 00000001 00000198 00000198 00000000 u 00000001 ADD     0 0000019a 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00af f4 8000fa88 000000 04 00220213 1 1 0 0000019a 008c      00000000 00000001 c2120209 c2120209 0000019a z 00000001 passD   0 c2120209 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00b0 48 006fff20 010000 48 00412223 1 1 0 0000019a 0008 008c 00000000 00000001 0000002c 0000002c 00000000 u 00000001 ADD     0 00000030 11.. ... ... .. 1111 0000000000 000 1f _L48    SW     Store word. Q=wradr=RS1+Simm                    sw       x4,4(x2)
00b1 66 8183bb20 000010 48 00412223 1 1 0 0000019a 0010      00000000 00000001 000001d0 000001d0 00000004 u 00000001 ADD     0 000001d4 11.. ... ... .. 1111 0000000000 000 1f SW_1           Write d to a+k until accepted                   
00b2 f2 000fb908 000000 48 00412223 1 1 0 0000019a 0010 01d4 00000000 00000001 00000002 00000002 000001d4 h 00000001 passD   0 00000002 1... ... ... .. 1111 0000000000 000 1f SW_2           Prepare read PC                                 
00b3 e6 8000b200 000000 48 00412223 1 1 0 0000019a 0088      00000000 00000001 00000002 00000002 000001d4 z 00000001 nearXOR 1 fffffe28 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00b4 de 022b7126 000010 48 00412223 1 1 0 0000019a 019c 0088 00000000 00000001 0000019a 0000019a 00000000 u 00000001 ADD     0 0000019c 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00b5 f4 8000fa88 000000 48 00412223 0 1 0 0000019c 008c      00000000 00000001 043d4401 043d4401 0000019c z 00000001 passD   0 043d4401 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00b6 04 006fff20 010000 04 00000413 0 1 0 0000019c 0000 008c 00000000 00000001 00000030 00000030 00000000 u 00000001 ADD     0 00000036 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x8,x0,0
00b7 e6 0010ba20 000000 04 00000413 0 1 0 0000019c 0088 0020 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00b8 de 022b7126 000010 04 00000413 0 1 0 0000019c 019c 0088 00000000 00000001 0000019c 0000019c 00000000 u 00000001 ADD     0 0000019e 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00b9 f4 8000fa88 000000 04 00000413 1 1 0 0000019e 008c      00000000 00000001 043d4401 043d4401 0000019e z 00000001 passD   0 043d4401 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00ba 04 006fff20 010000 04 00f40413 1 1 0 0000019e 0020 008c 00000000 00000001 00000036 00000036 00000000 u 00000001 ADD     0 0000003a 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x8,x8,15
00bb e6 0010ba20 000000 04 00f40413 1 1 0 0000019e 0088 0020 00000000 00000001 00000000 00000000 0000000f z 00000001 ADD     0 0000000f 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00bc de 022b7126 000010 04 00f40413 1 1 0 0000019e 01a0 0088 00000000 00000001 0000019e 0000019e 00000000 u 00000001 ADD     0 000001a0 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00bd f4 8000fa88 000000 04 00f40413 0 1 0 000001a0 008c      00000000 00000001 4481c422 4481c422 000001a0 z 00000001 passD   0 4481c422 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00be 48 006fff20 010000 48 00812423 0 1 0 000001a0 0008 008c 00000000 00000001 0000003a 0000003a 00000000 u 00000001 ADD     0 0000003e 11.. ... ... .. 1111 0000000000 000 1f _L48    SW     Store word. Q=wradr=RS1+Simm                    sw       x8,8(x2)
00bf 66 8183bb20 000010 48 00812423 0 1 0 000001a0 0020      00000000 00000001 000001d0 000001d0 00000008 u 00000001 ADD     0 000001d8 11.. ... ... .. 1111 0000000000 000 1f SW_1           Write d to a+k until accepted                   
00c0 f2 000fb908 000000 48 00812423 0 1 0 000001a0 0020 01d8 00000000 00000001 0000000f 0000000f 000001d8 h 00000001 passD   0 0000000f 1... ... ... .. 1111 0000000000 000 1f SW_2           Prepare read PC                                 
00c1 e6 8000b200 000000 48 00812423 0 1 0 000001a0 0088      00000000 00000001 0000000f 0000000f 000001d8 z 00000001 nearXOR 0 fffffe29 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00c2 de 022b7126 000010 48 00812423 0 1 0 000001a0 01a0 0088 00000000 00000001 000001a0 000001a0 00000000 u 00000001 ADD     0 000001a2 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00c3 f4 8000fa88 000000 48 00812423 1 1 0 000001a2 008c      00000000 00000001 4481c422 4481c422 000001a2 z 00000001 passD   0 4481c422 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
                 buser/dinx                                                                                                             progress STB(IO)     Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ    |sysack     S T E t r |mie ft Micro                                                                         
     || ucode    ||||may            c v u                                                                                    |          ||WE     ||ACK  SEL  epepepepep\\csr|| code                                                                          
  cy || |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
00c4 04 006fff20 010000 04 00000493 1 1 0 000001a2 0000 008c 00000000 00000001 0000003e 0000003e 00000000 u 00000001 ADD     0 00000044 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x9,x0,0
00c5 e6 0010ba20 000000 04 00000493 1 1 0 000001a2 0088 0024 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00c6 de 022b7126 000010 04 00000493 1 1 0 000001a2 01a4 0088 00000000 00000001 000001a2 000001a2 00000000 u 00000001 ADD     0 000001a4 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00c7 f4 8000fa88 000000 04 00000493 0 1 0 000001a4 008c      00000000 00000001 c62604c1 c62604c1 000001a4 z 00000001 passD   0 c62604c1 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00c8 04 006fff20 010000 04 01048493 0 1 0 000001a4 0024 008c 00000000 00000001 00000044 00000044 00000000 u 00000001 ADD     0 00000048 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x9,x9,16
00c9 e6 0010ba20 000000 04 01048493 0 1 0 000001a4 0088 0024 00000000 00000001 00000000 00000000 00000010 z 00000001 ADD     0 00000010 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00ca de 022b7126 000010 04 01048493 0 1 0 000001a4 01a4 0088 00000000 00000001 000001a4 000001a4 00000000 u 00000001 ADD     0 000001a6 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00cb f4 8000fa88 000000 04 01048493 1 1 0 000001a6 008c      00000000 00000001 c62604c1 c62604c1 000001a6 z 00000001 passD   0 c62604c1 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00cc 48 006fff20 010000 48 00912623 1 1 0 000001a6 0008 008c 00000000 00000001 00000048 00000048 00000000 u 00000001 ADD     0 0000004c 11.. ... ... .. 1111 0000000000 000 1f _L48    SW     Store word. Q=wradr=RS1+Simm                    sw       x9,12(x2)
00cd 66 8183bb20 000010 48 00912623 1 1 0 000001a6 0024      00000000 00000001 000001d0 000001d0 0000000c u 00000001 ADD     0 000001dc 11.. ... ... .. 1111 0000000000 000 1f SW_1           Write d to a+k until accepted                   
00ce f2 000fb908 000000 48 00912623 1 1 0 000001a6 0024 01dc 00000000 00000001 00000010 00000010 000001dc h 00000001 passD   0 00000010 1... ... ... .. 1111 0000000000 000 1f SW_2           Prepare read PC                                 
00cf e6 8000b200 000000 48 00912623 1 1 0 000001a6 0088      00000000 00000001 00000010 00000010 000001dc z 00000001 nearXOR 0 fffffe32 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00d0 de 022b7126 000010 48 00912623 1 1 0 000001a6 01a8 0088 00000000 00000001 000001a6 000001a6 00000000 u 00000001 ADD     0 000001a8 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00d1 f4 8000fa88 000000 48 00912623 0 1 0 000001a8 008c      00000000 00000001 05fd4581 05fd4581 000001a8 z 00000001 passD   0 05fd4581 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00d2 04 006fff20 010000 04 00000593 0 1 0 000001a8 0000 008c 00000000 00000001 0000004c 0000004c 00000000 u 00000001 ADD     0 00000052 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x11,x0,0
00d3 e6 0010ba20 000000 04 00000593 0 1 0 000001a8 0088 002c 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00d4 de 022b7126 000010 04 00000593 0 1 0 000001a8 01a8 0088 00000000 00000001 000001a8 000001a8 00000000 u 00000001 ADD     0 000001aa 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00d5 f4 8000fa88 000000 04 00000593 1 1 0 000001aa 008c      00000000 00000001 05fd4581 05fd4581 000001aa z 00000001 passD   0 05fd4581 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00d6 04 006fff20 010000 04 01f58593 1 1 0 000001aa 002c 008c 00000000 00000001 00000052 00000052 00000000 u 00000001 ADD     0 00000056 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x11,x11,31
00d7 e6 0010ba20 000000 04 01f58593 1 1 0 000001aa 0088 002c 00000000 00000001 00000000 00000000 0000001f z 00000001 ADD     0 0000001f 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00d8 de 022b7126 000010 04 01f58593 1 1 0 000001aa 01ac 0088 00000000 00000001 000001aa 000001aa 00000000 u 00000001 ADD     0 000001ac 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00d9 f4 8000fa88 000000 04 01f58593 0 1 0 000001ac 008c      00000000 00000001 0117c82e 0117c82e 000001ac z 00000001 passD   0 0117c82e 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00da 48 006fff20 010000 48 00b12823 0 1 0 000001ac 0008 008c 00000000 00000001 00000056 00000056 00000000 u 00000001 ADD     0 0000005a 11.. ... ... .. 1111 0000000000 000 1f _L48    SW     Store word. Q=wradr=RS1+Simm                    sw       x11,16(x2)
00db 66 8183bb20 000010 48 00b12823 0 1 0 000001ac 002c      00000000 00000001 000001d0 000001d0 00000010 u 00000001 ADD     0 000001e0 11.. ... ... .. 1111 0000000000 000 1f SW_1           Write d to a+k until accepted                   
00dc f2 000fb908 000000 48 00b12823 0 1 0 000001ac 002c 01e0 00000000 00000001 0000001f 0000001f 000001e0 h 00000001 passD   0 0000001f 1... ... ... .. 1111 0000000000 000 1f SW_2           Prepare read PC                                 
00dd e6 8000b200 000000 48 00b12823 0 1 0 000001ac 0088      00000000 00000001 0000001f 0000001f 000001e0 z 00000001 nearXOR 1 fffffe01 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00de de 022b7126 000010 48 00b12823 0 1 0 000001ac 01ac 0088 00000000 00000001 000001ac 000001ac 00000000 u 00000001 ADD     0 000001ae 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00df f4 8000fa88 000000 48 00b12823 1 1 0 000001ae 008c      00000000 00000001 0117c82e 0117c82e 000001ae z 00000001 passD   0 0117c82e 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
                 buser/dinx                                                                                                             progress  (RAM)      Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ       ACK      S T E t r |mie ft Micro                                                                         
     || ucode    ||||may            c v u                                                                                    |          ||WE       STB| SEL  epepepepep\\csr|| code                                                                          
  cy || |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
00e0 d5 006fff20 000000 05 00b10117 1 0 1 000001ae 0008 008c 00000000 00000001 0000005a 0000005a 00000000 u 00000001 ADD     0 00000060 11.. ... ... .. 1111 0000000000 000 1f unalignd Fr00  Unaligned pc, prep read high hword              
00e1 e6 8000b200 000000 05 00b10117 1 0 1 000001ae 0088      00000000 00000001 000001d0 000001d0 00b10000 z 00000001 nearXOR 0 ff4efe2e 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00e2 de 022b7126 000010 05 00b10117 1 0 1 000001ae 01b0 0088 00000000 00000001 000001ae 000001ae 00000000 u 00000001 ADD     0 000001b0 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00e3 f4 8000fa88 000000 05 00b10117 0 0 1 000001b0 008c      00000000 00000001 01130000 01130000 000001b0 z 00000001 passD   0 01130000 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00e4 05 006fff20 010000 05 00000117 0 1 0 000001b0 0000 008c 00000000 00000001 00000060 00000060 00000000 u 00000001 ADD     0 00000064 11.. ... ... .. 1111 0000000000 000 1f _L05    AUIPC  q = imm20 (copy x/8)                            auipc    x2,0x0
00e5 04 8000b100 000000 05 00000117 0 1 0 000001b0 0088      00000000 00000001 00000000 00000000 00000000 h 00000001 nearXOR 0 fffffffe 1... ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         
00e6 e6 0010ba20 000000 05 00000117 0 1 0 000001b0 0088 0008 00000000 00000001 000001b0 000001b0 00000000 z 00000001 ADD     0 000001b0 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00e7 de 022b7126 000010 05 00000117 0 1 0 000001b0 01b0 0088 00000000 00000001 000001b0 000001b0 00000000 u 00000001 ADD     0 000001b2 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00e8 f4 8000fa88 000000 05 00000117 1 1 0 000001b2 008c      00000000 00000001 01130000 01130000 000001b2 z 00000001 passD   0 01130000 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00e9 d5 006fff20 000000 04 00000113 1 0 1 000001b2 0000 008c 00000000 00000001 00000064 00000064 00000000 u 00000001 ADD     0 00000069 11.. ... ... .. 1111 0000000000 000 1f unalignd Fr00  Unaligned pc, prep read high hword              
00ea e6 8000b200 000000 04 00000113 1 0 1 000001b2 0088      00000000 00000001 00000000 00000000 00000000 z 00000001 nearXOR 0 fffffffe 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00eb de 022b7126 000010 04 00000113 1 0 1 000001b2 01b4 0088 00000000 00000001 000001b2 000001b2 00000000 u 00000001 ADD     0 000001b4 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00ec f4 8000fa88 000000 04 00000113 0 0 1 000001b4 008c      00000000 00000001 00010361 00010361 000001b4 z 00000001 passD   0 00010361 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00ed 04 006fff20 010000 04 03610113 0 1 0 000001b4 0008 008c 00000000 00000001 00000069 00000069 00000000 u 00000001 ADD     0 0000006d 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x2,x2,54
00ee e6 0010ba20 000000 04 03610113 0 1 0 000001b4 0088 0008 00000000 00000001 000001b0 000001b0 00000036 z 00000001 ADD     0 000001e6 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00ef de 022b7126 000010 04 03610113 0 1 0 000001b4 01b4 0088 00000000 00000001 000001b4 000001b4 00000000 u 00000001 ADD     0 000001b6 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00f0 f4 8000fa88 000000 04 03610113 1 1 0 000001b6 008c      00000000 00000001 00010361 00010361 000001b6 z 00000001 passD   0 00010361 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00f1 04 006fff20 010000 04 00000013 1 1 0 000001b6 0000 008c 00000000 00000001 0000006d 0000006d 00000000 u 00000001 ADD     0 00000071 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x0,x0,0
00f2 e6 0010ba20 000000 04 00000013 1 1 0 000001b6 0088 0080 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00f3 de 022b7126 000010 04 00000013 1 1 0 000001b6 01b8 0088 00000000 00000001 000001b6 000001b6 00000000 u 00000001 ADD     0 000001b8 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00f4 f4 8000fa88 000000 04 00000013 0 1 0 000001b8 008c      00000000 00000001 00000013 00000013 000001b8 z 00000001 passD   0 00000013 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00f5 04 006fff20 010000 04 00000013 0 0 0 000001b8 0000 008c 00000000 00000001 00000071 00000071 00000000 u 00000001 ADD     0 00000075 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x0,x0,0
00f6 e6 0010ba20 000000 04 00000013 0 0 0 000001b8 0088 0080 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00f7 de 022b7126 000010 04 00000013 0 0 0 000001b8 01bc 0088 00000000 00000001 000001b8 000001b8 00000000 u 00000001 ADD     0 000001bc 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
00f8 f4 8000fa88 000000 04 00000013 0 0 0 000001bc 008c      00000000 00000001 00000013 00000013 000001bc z 00000001 passD   0 00000013 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
00f9 04 006fff20 010000 04 00000013 0 0 0 000001bc 0000 008c 00000000 00000001 00000075 00000075 00000000 u 00000001 ADD     0 00000079 11.. ... ... .. 1111 0000000000 000 1f ADDI_0  ADDI   Add immediate. rd =RS1+Iimm (or joined)         addi     x0,x0,0
00fa e6 0010ba20 000000 04 00000013 0 0 0 000001bc 0088 0080 00000000 00000001 00000000 00000000 00000000 z 00000001 ADD     0 00000000 11.. ... ... .. 1111 0000000000 000 1f StdIncPc Fr00  IncPC, OpFetch                                  
00fb de 022b7126 000010 04 00000013 0 0 0 000001bc 01c0 0088 00000000 00000001 000001bc 000001bc 00000000 u 00000001 ADD     0 000001c0 11.. ... ... .. 1111 0000000000 000 1f Fetch    Fr00  Read and latch instruction                      
                 buser/dinx                                                                                                             progress STB(IO)     Int_info_ mpie shi                                                                              
     minx        ||qint/ill         p r l                                                                                    Cy         |enaQ    |sysack     S T E t r |mie ft Micro                                                                         
     || ucode    ||||may            c v u                                                                                    |          ||WE     ||ACK  SEL  epepepepep\\csr|| code                                                                          
  cy || |||||||| |||||take I[31:0]  1 c h pc[31:0] rai  wai  in[31:0] rDee____ DAT_O___ Di[31:0] ADR_O___   M[31:0]_ ALUOP__ | B[31:0]_ |||      ||| || 3210 |||||||||| ||| || label__ Microcode_instruction_text____________________________ Assembler_instr
00fc f4 8000fa88 000000 04 00000013 0 0 0 000001c0 008c      00000000 00000001 01ffb033 01ffb033 000001c0 z 00000001 passD   0 01ffb033 11.. ... ... .. 1111 0000000000 000 1f Fetch2   Fr00  Upd ttime, I. Q=imm Use dinx unless unaligned   
EBR dump as requested by hint
0000 00000000 00000000 000001e6 00000001 00000002 00000000 00000000 00000000 0000000f 00000010 00000000 0000001f 00000000 00000000 00000000 00000000 
0040 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0080 00000000 00000000 000001c0 00000079 00000000 ffffff7f 000000ff 0000ffff ffff7fff 00000180 00000000 ffffffff 00000000 00000000 00000000 00000000 
00c0 00000000 40800100 00000000 00000001 00000002 00000003 00000004 00000005 00000000 00000000 00000000 00000000 00000000 00000000 ffffffff ffffffff 
0100 00000000 0b60000b 0000b033 00000000 00001137 80010113 00000497 0b848493 00000917 12090913 600005b7 00458593 0004a503 01c000ef 00a00513 01853033 
0140 00a5a023 00448493 ff24c4e3 00003033 03900393 01c00293 00555333 00f37313 03030313 0063d463 02730313 0065a023 01833033 ffc28293 fe02d0e3 00008067 
0180 00001137 80010113 00000117 04810113 01854181 4201c00e c2120209 043d4401 4481c422 c62604c1 05fd4581 0117c82e 01130000 00010361 00000013 00000013 
01c0 01ffb033 00003033 0001b7a1 00000013 00000001 00000002 0000000f 00000010 0000001f ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff 
0200 ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000000 
0240 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0280 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
02c0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0300 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0340 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0380 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
03c0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0400 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0440 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0480 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
04c0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0500 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0540 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0580 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
05c0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0600 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0640 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0680 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
06c0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0700 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0740 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
0780 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
07c0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
../../../obj_dir/rv32imc/wC-ADDI.bin     success    28 instructions in    260 cycles, cpi =  7.00
